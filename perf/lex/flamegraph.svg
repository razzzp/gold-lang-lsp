<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="934" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="917.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="917.00"> </text><svg id="frames" x="10" width="1180" total_samples="205"><g><title>core::ptr::drop_in_place&lt;std::sync::mpsc::Receiver&lt;test::event::CompletedTest&gt;&gt; (1 samples, 0.49%)</title><rect x="0.0000%" y="533" width="0.4878%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mpmc::Receiver&lt;test::event::CompletedTest&gt;&gt; (1 samples, 0.49%)</title><rect x="0.0000%" y="517" width="0.4878%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="527.50"></text></g><g><title>&lt;std::sync::mpmc::Receiver&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.49%)</title><rect x="0.0000%" y="501" width="0.4878%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="511.50"></text></g><g><title>std::sync::mpmc::counter::Receiver&lt;C&gt;::release (1 samples, 0.49%)</title><rect x="0.0000%" y="485" width="0.4878%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="495.50"></text></g><g><title>&lt;std::sync::mpmc::Receiver&lt;T&gt; as core::ops::drop::Drop&gt;::drop::{{closure}} (1 samples, 0.49%)</title><rect x="0.0000%" y="469" width="0.4878%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="479.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::disconnect_receivers (1 samples, 0.49%)</title><rect x="0.0000%" y="453" width="0.4878%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="463.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::discard_all_messages (1 samples, 0.49%)</title><rect x="0.0000%" y="437" width="0.4878%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50"></text></g><g><title>core::mem::drop (1 samples, 0.49%)</title><rect x="0.0000%" y="421" width="0.4878%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;std::sync::mpmc::list::Block&lt;test::event::CompletedTest&gt;&gt;&gt; (1 samples, 0.49%)</title><rect x="0.0000%" y="405" width="0.4878%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.49%)</title><rect x="0.0000%" y="389" width="0.4878%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.49%)</title><rect x="0.0000%" y="373" width="0.4878%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.49%)</title><rect x="0.0000%" y="357" width="0.4878%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>__GI___libc_free (1 samples, 0.49%)</title><rect x="0.0000%" y="341" width="0.4878%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>_int_free (1 samples, 0.49%)</title><rect x="0.0000%" y="325" width="0.4878%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>heap_trim (1 samples, 0.49%)</title><rect x="0.0000%" y="309" width="0.4878%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>shrink_heap (1 samples, 0.49%)</title><rect x="0.0000%" y="293" width="0.4878%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>__GI_madvise (1 samples, 0.49%)</title><rect x="0.0000%" y="277" width="0.4878%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.49%)</title><rect x="0.0000%" y="261" width="0.4878%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>do_syscall_64 (1 samples, 0.49%)</title><rect x="0.0000%" y="245" width="0.4878%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>__x64_sys_madvise (1 samples, 0.49%)</title><rect x="0.0000%" y="229" width="0.4878%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>do_madvise.part.0 (1 samples, 0.49%)</title><rect x="0.0000%" y="213" width="0.4878%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="223.50"></text></g><g><title>madvise_walk_vmas (1 samples, 0.49%)</title><rect x="0.0000%" y="197" width="0.4878%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="207.50"></text></g><g><title>madvise_vma_behavior (1 samples, 0.49%)</title><rect x="0.0000%" y="181" width="0.4878%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="191.50"></text></g><g><title>zap_page_range_single (1 samples, 0.49%)</title><rect x="0.0000%" y="165" width="0.4878%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="175.50"></text></g><g><title>unmap_single_vma (1 samples, 0.49%)</title><rect x="0.0000%" y="149" width="0.4878%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="1"/><text x="0.2500%" y="159.50"></text></g><g><title>unmap_page_range (1 samples, 0.49%)</title><rect x="0.0000%" y="133" width="0.4878%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="1"/><text x="0.2500%" y="143.50"></text></g><g><title>zap_pmd_range.isra.0 (1 samples, 0.49%)</title><rect x="0.0000%" y="117" width="0.4878%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="1"/><text x="0.2500%" y="127.50"></text></g><g><title>zap_pte_range (1 samples, 0.49%)</title><rect x="0.0000%" y="101" width="0.4878%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="1"/><text x="0.2500%" y="111.50"></text></g><g><title>__x64_sys_futex (4 samples, 1.95%)</title><rect x="0.4878%" y="277" width="1.9512%" height="15" fill="rgb(214,148,48)" fg:x="1" fg:w="4"/><text x="0.7378%" y="287.50">_..</text></g><g><title>do_futex (4 samples, 1.95%)</title><rect x="0.4878%" y="261" width="1.9512%" height="15" fill="rgb(232,36,49)" fg:x="1" fg:w="4"/><text x="0.7378%" y="271.50">d..</text></g><g><title>futex_wait (4 samples, 1.95%)</title><rect x="0.4878%" y="245" width="1.9512%" height="15" fill="rgb(209,103,24)" fg:x="1" fg:w="4"/><text x="0.7378%" y="255.50">f..</text></g><g><title>futex_wait_queue (4 samples, 1.95%)</title><rect x="0.4878%" y="229" width="1.9512%" height="15" fill="rgb(229,88,8)" fg:x="1" fg:w="4"/><text x="0.7378%" y="239.50">f..</text></g><g><title>schedule (4 samples, 1.95%)</title><rect x="0.4878%" y="213" width="1.9512%" height="15" fill="rgb(213,181,19)" fg:x="1" fg:w="4"/><text x="0.7378%" y="223.50">s..</text></g><g><title>__schedule (4 samples, 1.95%)</title><rect x="0.4878%" y="197" width="1.9512%" height="15" fill="rgb(254,191,54)" fg:x="1" fg:w="4"/><text x="0.7378%" y="207.50">_..</text></g><g><title>finish_task_switch.isra.0 (4 samples, 1.95%)</title><rect x="0.4878%" y="181" width="1.9512%" height="15" fill="rgb(241,83,37)" fg:x="1" fg:w="4"/><text x="0.7378%" y="191.50">f..</text></g><g><title>__perf_event_task_sched_in (4 samples, 1.95%)</title><rect x="0.4878%" y="165" width="1.9512%" height="15" fill="rgb(233,36,39)" fg:x="1" fg:w="4"/><text x="0.7378%" y="175.50">_..</text></g><g><title>ctx_sched_in (4 samples, 1.95%)</title><rect x="0.4878%" y="149" width="1.9512%" height="15" fill="rgb(226,3,54)" fg:x="1" fg:w="4"/><text x="0.7378%" y="159.50">c..</text></g><g><title>visit_groups_merge.constprop.0.isra.0 (4 samples, 1.95%)</title><rect x="0.4878%" y="133" width="1.9512%" height="15" fill="rgb(245,192,40)" fg:x="1" fg:w="4"/><text x="0.7378%" y="143.50">v..</text></g><g><title>merge_sched_in (4 samples, 1.95%)</title><rect x="0.4878%" y="117" width="1.9512%" height="15" fill="rgb(238,167,29)" fg:x="1" fg:w="4"/><text x="0.7378%" y="127.50">m..</text></g><g><title>event_sched_in (4 samples, 1.95%)</title><rect x="0.4878%" y="101" width="1.9512%" height="15" fill="rgb(232,182,51)" fg:x="1" fg:w="4"/><text x="0.7378%" y="111.50">e..</text></g><g><title>perf_ibs_add (4 samples, 1.95%)</title><rect x="0.4878%" y="85" width="1.9512%" height="15" fill="rgb(231,60,39)" fg:x="1" fg:w="4"/><text x="0.7378%" y="95.50">p..</text></g><g><title>perf_ibs_start (4 samples, 1.95%)</title><rect x="0.4878%" y="69" width="1.9512%" height="15" fill="rgb(208,69,12)" fg:x="1" fg:w="4"/><text x="0.7378%" y="79.50">p..</text></g><g><title>perf_event_update_userpage (4 samples, 1.95%)</title><rect x="0.4878%" y="53" width="1.9512%" height="15" fill="rgb(235,93,37)" fg:x="1" fg:w="4"/><text x="0.7378%" y="63.50">p..</text></g><g><title>__libc_start_main_impl (6 samples, 2.93%)</title><rect x="0.0000%" y="837" width="2.9268%" height="15" fill="rgb(213,116,39)" fg:x="0" fg:w="6"/><text x="0.2500%" y="847.50">__..</text></g><g><title>__libc_start_call_main (6 samples, 2.93%)</title><rect x="0.0000%" y="821" width="2.9268%" height="15" fill="rgb(222,207,29)" fg:x="0" fg:w="6"/><text x="0.2500%" y="831.50">__..</text></g><g><title>main (6 samples, 2.93%)</title><rect x="0.0000%" y="805" width="2.9268%" height="15" fill="rgb(206,96,30)" fg:x="0" fg:w="6"/><text x="0.2500%" y="815.50">ma..</text></g><g><title>std::rt::lang_start_internal (6 samples, 2.93%)</title><rect x="0.0000%" y="789" width="2.9268%" height="15" fill="rgb(218,138,4)" fg:x="0" fg:w="6"/><text x="0.2500%" y="799.50">st..</text></g><g><title>std::panic::catch_unwind (6 samples, 2.93%)</title><rect x="0.0000%" y="773" width="2.9268%" height="15" fill="rgb(250,191,14)" fg:x="0" fg:w="6"/><text x="0.2500%" y="783.50">st..</text></g><g><title>std::panicking::try (6 samples, 2.93%)</title><rect x="0.0000%" y="757" width="2.9268%" height="15" fill="rgb(239,60,40)" fg:x="0" fg:w="6"/><text x="0.2500%" y="767.50">st..</text></g><g><title>std::panicking::try::do_call (6 samples, 2.93%)</title><rect x="0.0000%" y="741" width="2.9268%" height="15" fill="rgb(206,27,48)" fg:x="0" fg:w="6"/><text x="0.2500%" y="751.50">st..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (6 samples, 2.93%)</title><rect x="0.0000%" y="725" width="2.9268%" height="15" fill="rgb(225,35,8)" fg:x="0" fg:w="6"/><text x="0.2500%" y="735.50">st..</text></g><g><title>std::panic::catch_unwind (6 samples, 2.93%)</title><rect x="0.0000%" y="709" width="2.9268%" height="15" fill="rgb(250,213,24)" fg:x="0" fg:w="6"/><text x="0.2500%" y="719.50">st..</text></g><g><title>std::panicking::try (6 samples, 2.93%)</title><rect x="0.0000%" y="693" width="2.9268%" height="15" fill="rgb(247,123,22)" fg:x="0" fg:w="6"/><text x="0.2500%" y="703.50">st..</text></g><g><title>std::panicking::try::do_call (6 samples, 2.93%)</title><rect x="0.0000%" y="677" width="2.9268%" height="15" fill="rgb(231,138,38)" fg:x="0" fg:w="6"/><text x="0.2500%" y="687.50">st..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (6 samples, 2.93%)</title><rect x="0.0000%" y="661" width="2.9268%" height="15" fill="rgb(231,145,46)" fg:x="0" fg:w="6"/><text x="0.2500%" y="671.50">co..</text></g><g><title>std::rt::lang_start::{{closure}} (6 samples, 2.93%)</title><rect x="0.0000%" y="645" width="2.9268%" height="15" fill="rgb(251,118,11)" fg:x="0" fg:w="6"/><text x="0.2500%" y="655.50">st..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (6 samples, 2.93%)</title><rect x="0.0000%" y="629" width="2.9268%" height="15" fill="rgb(217,147,25)" fg:x="0" fg:w="6"/><text x="0.2500%" y="639.50">st..</text></g><g><title>core::ops::function::FnOnce::call_once (6 samples, 2.93%)</title><rect x="0.0000%" y="613" width="2.9268%" height="15" fill="rgb(247,81,37)" fg:x="0" fg:w="6"/><text x="0.2500%" y="623.50">co..</text></g><g><title>test::test_main_static (6 samples, 2.93%)</title><rect x="0.0000%" y="597" width="2.9268%" height="15" fill="rgb(209,12,38)" fg:x="0" fg:w="6"/><text x="0.2500%" y="607.50">te..</text></g><g><title>test::test_main (6 samples, 2.93%)</title><rect x="0.0000%" y="581" width="2.9268%" height="15" fill="rgb(227,1,9)" fg:x="0" fg:w="6"/><text x="0.2500%" y="591.50">te..</text></g><g><title>test::console::run_tests_console (6 samples, 2.93%)</title><rect x="0.0000%" y="565" width="2.9268%" height="15" fill="rgb(248,47,43)" fg:x="0" fg:w="6"/><text x="0.2500%" y="575.50">te..</text></g><g><title>test::run_tests (6 samples, 2.93%)</title><rect x="0.0000%" y="549" width="2.9268%" height="15" fill="rgb(221,10,30)" fg:x="0" fg:w="6"/><text x="0.2500%" y="559.50">te..</text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::recv_timeout (5 samples, 2.44%)</title><rect x="0.4878%" y="533" width="2.4390%" height="15" fill="rgb(210,229,1)" fg:x="1" fg:w="5"/><text x="0.7378%" y="543.50">st..</text></g><g><title>std::sync::mpmc::Receiver&lt;T&gt;::recv_timeout (5 samples, 2.44%)</title><rect x="0.4878%" y="517" width="2.4390%" height="15" fill="rgb(222,148,37)" fg:x="1" fg:w="5"/><text x="0.7378%" y="527.50">st..</text></g><g><title>std::sync::mpmc::Receiver&lt;T&gt;::recv_deadline (5 samples, 2.44%)</title><rect x="0.4878%" y="501" width="2.4390%" height="15" fill="rgb(234,67,33)" fg:x="1" fg:w="5"/><text x="0.7378%" y="511.50">st..</text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::recv (5 samples, 2.44%)</title><rect x="0.4878%" y="485" width="2.4390%" height="15" fill="rgb(247,98,35)" fg:x="1" fg:w="5"/><text x="0.7378%" y="495.50">st..</text></g><g><title>std::sync::mpmc::context::Context::with (5 samples, 2.44%)</title><rect x="0.4878%" y="469" width="2.4390%" height="15" fill="rgb(247,138,52)" fg:x="1" fg:w="5"/><text x="0.7378%" y="479.50">st..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5 samples, 2.44%)</title><rect x="0.4878%" y="453" width="2.4390%" height="15" fill="rgb(213,79,30)" fg:x="1" fg:w="5"/><text x="0.7378%" y="463.50">st..</text></g><g><title>std::sync::mpmc::context::Context::with::{{closure}} (5 samples, 2.44%)</title><rect x="0.4878%" y="437" width="2.4390%" height="15" fill="rgb(246,177,23)" fg:x="1" fg:w="5"/><text x="0.7378%" y="447.50">st..</text></g><g><title>std::sync::mpmc::context::Context::with::{{closure}} (5 samples, 2.44%)</title><rect x="0.4878%" y="421" width="2.4390%" height="15" fill="rgb(230,62,27)" fg:x="1" fg:w="5"/><text x="0.7378%" y="431.50">st..</text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::recv::{{closure}} (5 samples, 2.44%)</title><rect x="0.4878%" y="405" width="2.4390%" height="15" fill="rgb(216,154,8)" fg:x="1" fg:w="5"/><text x="0.7378%" y="415.50">st..</text></g><g><title>std::sync::mpmc::context::Context::wait_until (5 samples, 2.44%)</title><rect x="0.4878%" y="389" width="2.4390%" height="15" fill="rgb(244,35,45)" fg:x="1" fg:w="5"/><text x="0.7378%" y="399.50">st..</text></g><g><title>std::thread::park_timeout (5 samples, 2.44%)</title><rect x="0.4878%" y="373" width="2.4390%" height="15" fill="rgb(251,115,12)" fg:x="1" fg:w="5"/><text x="0.7378%" y="383.50">st..</text></g><g><title>std::sys_common::thread_parking::futex::Parker::park_timeout (5 samples, 2.44%)</title><rect x="0.4878%" y="357" width="2.4390%" height="15" fill="rgb(240,54,50)" fg:x="1" fg:w="5"/><text x="0.7378%" y="367.50">st..</text></g><g><title>std::sys::unix::futex::futex_wait (5 samples, 2.44%)</title><rect x="0.4878%" y="341" width="2.4390%" height="15" fill="rgb(233,84,52)" fg:x="1" fg:w="5"/><text x="0.7378%" y="351.50">st..</text></g><g><title>syscall (5 samples, 2.44%)</title><rect x="0.4878%" y="325" width="2.4390%" height="15" fill="rgb(207,117,47)" fg:x="1" fg:w="5"/><text x="0.7378%" y="335.50">sy..</text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 2.44%)</title><rect x="0.4878%" y="309" width="2.4390%" height="15" fill="rgb(249,43,39)" fg:x="1" fg:w="5"/><text x="0.7378%" y="319.50">en..</text></g><g><title>do_syscall_64 (5 samples, 2.44%)</title><rect x="0.4878%" y="293" width="2.4390%" height="15" fill="rgb(209,38,44)" fg:x="1" fg:w="5"/><text x="0.7378%" y="303.50">do..</text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.49%)</title><rect x="2.4390%" y="277" width="0.4878%" height="15" fill="rgb(236,212,23)" fg:x="5" fg:w="1"/><text x="2.6890%" y="287.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.49%)</title><rect x="2.4390%" y="261" width="0.4878%" height="15" fill="rgb(242,79,21)" fg:x="5" fg:w="1"/><text x="2.6890%" y="271.50"></text></g><g><title>exit_to_user_mode_loop (1 samples, 0.49%)</title><rect x="2.4390%" y="245" width="0.4878%" height="15" fill="rgb(211,96,35)" fg:x="5" fg:w="1"/><text x="2.6890%" y="255.50"></text></g><g><title>__rseq_handle_notify_resume (1 samples, 0.49%)</title><rect x="2.4390%" y="229" width="0.4878%" height="15" fill="rgb(253,215,40)" fg:x="5" fg:w="1"/><text x="2.6890%" y="239.50"></text></g><g><title>_start (7 samples, 3.41%)</title><rect x="0.0000%" y="853" width="3.4146%" height="15" fill="rgb(211,81,21)" fg:x="0" fg:w="7"/><text x="0.2500%" y="863.50">_st..</text></g><g><title>_dl_start (1 samples, 0.49%)</title><rect x="2.9268%" y="837" width="0.4878%" height="15" fill="rgb(208,190,38)" fg:x="6" fg:w="1"/><text x="3.1768%" y="847.50"></text></g><g><title>_dl_start_final (1 samples, 0.49%)</title><rect x="2.9268%" y="821" width="0.4878%" height="15" fill="rgb(235,213,38)" fg:x="6" fg:w="1"/><text x="3.1768%" y="831.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.49%)</title><rect x="2.9268%" y="805" width="0.4878%" height="15" fill="rgb(237,122,38)" fg:x="6" fg:w="1"/><text x="3.1768%" y="815.50"></text></g><g><title>dl_main (1 samples, 0.49%)</title><rect x="2.9268%" y="789" width="0.4878%" height="15" fill="rgb(244,218,35)" fg:x="6" fg:w="1"/><text x="3.1768%" y="799.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.49%)</title><rect x="2.9268%" y="773" width="0.4878%" height="15" fill="rgb(240,68,47)" fg:x="6" fg:w="1"/><text x="3.1768%" y="783.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.49%)</title><rect x="2.9268%" y="757" width="0.4878%" height="15" fill="rgb(210,16,53)" fg:x="6" fg:w="1"/><text x="3.1768%" y="767.50"></text></g><g><title>openaux (1 samples, 0.49%)</title><rect x="2.9268%" y="741" width="0.4878%" height="15" fill="rgb(235,124,12)" fg:x="6" fg:w="1"/><text x="3.1768%" y="751.50"></text></g><g><title>_dl_map_object (1 samples, 0.49%)</title><rect x="2.9268%" y="725" width="0.4878%" height="15" fill="rgb(224,169,11)" fg:x="6" fg:w="1"/><text x="3.1768%" y="735.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.49%)</title><rect x="2.9268%" y="709" width="0.4878%" height="15" fill="rgb(250,166,2)" fg:x="6" fg:w="1"/><text x="3.1768%" y="719.50"></text></g><g><title>_dl_map_segments (1 samples, 0.49%)</title><rect x="2.9268%" y="693" width="0.4878%" height="15" fill="rgb(242,216,29)" fg:x="6" fg:w="1"/><text x="3.1768%" y="703.50"></text></g><g><title>__mmap64 (1 samples, 0.49%)</title><rect x="2.9268%" y="677" width="0.4878%" height="15" fill="rgb(230,116,27)" fg:x="6" fg:w="1"/><text x="3.1768%" y="687.50"></text></g><g><title>__mmap64 (1 samples, 0.49%)</title><rect x="2.9268%" y="661" width="0.4878%" height="15" fill="rgb(228,99,48)" fg:x="6" fg:w="1"/><text x="3.1768%" y="671.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.49%)</title><rect x="2.9268%" y="645" width="0.4878%" height="15" fill="rgb(253,11,6)" fg:x="6" fg:w="1"/><text x="3.1768%" y="655.50"></text></g><g><title>do_syscall_64 (1 samples, 0.49%)</title><rect x="2.9268%" y="629" width="0.4878%" height="15" fill="rgb(247,143,39)" fg:x="6" fg:w="1"/><text x="3.1768%" y="639.50"></text></g><g><title>__x64_sys_mmap (1 samples, 0.49%)</title><rect x="2.9268%" y="613" width="0.4878%" height="15" fill="rgb(236,97,10)" fg:x="6" fg:w="1"/><text x="3.1768%" y="623.50"></text></g><g><title>ksys_mmap_pgoff (1 samples, 0.49%)</title><rect x="2.9268%" y="597" width="0.4878%" height="15" fill="rgb(233,208,19)" fg:x="6" fg:w="1"/><text x="3.1768%" y="607.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.49%)</title><rect x="2.9268%" y="581" width="0.4878%" height="15" fill="rgb(216,164,2)" fg:x="6" fg:w="1"/><text x="3.1768%" y="591.50"></text></g><g><title>do_mmap (1 samples, 0.49%)</title><rect x="2.9268%" y="565" width="0.4878%" height="15" fill="rgb(220,129,5)" fg:x="6" fg:w="1"/><text x="3.1768%" y="575.50"></text></g><g><title>mmap_region (1 samples, 0.49%)</title><rect x="2.9268%" y="549" width="0.4878%" height="15" fill="rgb(242,17,10)" fg:x="6" fg:w="1"/><text x="3.1768%" y="559.50"></text></g><g><title>do_mas_munmap (1 samples, 0.49%)</title><rect x="2.9268%" y="533" width="0.4878%" height="15" fill="rgb(242,107,0)" fg:x="6" fg:w="1"/><text x="3.1768%" y="543.50"></text></g><g><title>do_mas_align_munmap (1 samples, 0.49%)</title><rect x="2.9268%" y="517" width="0.4878%" height="15" fill="rgb(251,28,31)" fg:x="6" fg:w="1"/><text x="3.1768%" y="527.50"></text></g><g><title>__split_vma (1 samples, 0.49%)</title><rect x="2.9268%" y="501" width="0.4878%" height="15" fill="rgb(233,223,10)" fg:x="6" fg:w="1"/><text x="3.1768%" y="511.50"></text></g><g><title>__vma_adjust (1 samples, 0.49%)</title><rect x="2.9268%" y="485" width="0.4878%" height="15" fill="rgb(215,21,27)" fg:x="6" fg:w="1"/><text x="3.1768%" y="495.50"></text></g><g><title>mas_preallocate (1 samples, 0.49%)</title><rect x="2.9268%" y="469" width="0.4878%" height="15" fill="rgb(232,23,21)" fg:x="6" fg:w="1"/><text x="3.1768%" y="479.50"></text></g><g><title>mas_alloc_nodes (1 samples, 0.49%)</title><rect x="2.9268%" y="453" width="0.4878%" height="15" fill="rgb(244,5,23)" fg:x="6" fg:w="1"/><text x="3.1768%" y="463.50"></text></g><g><title>kmem_cache_alloc_bulk (1 samples, 0.49%)</title><rect x="2.9268%" y="437" width="0.4878%" height="15" fill="rgb(226,81,46)" fg:x="6" fg:w="1"/><text x="3.1768%" y="447.50"></text></g><g><title>__kmem_cache_alloc_bulk (1 samples, 0.49%)</title><rect x="2.9268%" y="421" width="0.4878%" height="15" fill="rgb(247,70,30)" fg:x="6" fg:w="1"/><text x="3.1768%" y="431.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.49%)</title><rect x="3.4146%" y="853" width="0.4878%" height="15" fill="rgb(212,68,19)" fg:x="7" fg:w="1"/><text x="3.6646%" y="863.50"></text></g><g><title>exc_page_fault (1 samples, 0.49%)</title><rect x="3.4146%" y="837" width="0.4878%" height="15" fill="rgb(240,187,13)" fg:x="7" fg:w="1"/><text x="3.6646%" y="847.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.49%)</title><rect x="3.4146%" y="821" width="0.4878%" height="15" fill="rgb(223,113,26)" fg:x="7" fg:w="1"/><text x="3.6646%" y="831.50"></text></g><g><title>lock_mm_and_find_vma (1 samples, 0.49%)</title><rect x="3.4146%" y="805" width="0.4878%" height="15" fill="rgb(206,192,2)" fg:x="7" fg:w="1"/><text x="3.6646%" y="815.50"></text></g><g><title>find_vma (1 samples, 0.49%)</title><rect x="3.4146%" y="789" width="0.4878%" height="15" fill="rgb(241,108,4)" fg:x="7" fg:w="1"/><text x="3.6646%" y="799.50"></text></g><g><title>mt_find (1 samples, 0.49%)</title><rect x="3.4146%" y="773" width="0.4878%" height="15" fill="rgb(247,173,49)" fg:x="7" fg:w="1"/><text x="3.6646%" y="783.50"></text></g><g><title>mtree_range_walk (1 samples, 0.49%)</title><rect x="3.4146%" y="757" width="0.4878%" height="15" fill="rgb(224,114,35)" fg:x="7" fg:w="1"/><text x="3.6646%" y="767.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.49%)</title><rect x="3.9024%" y="853" width="0.4878%" height="15" fill="rgb(245,159,27)" fg:x="8" fg:w="1"/><text x="4.1524%" y="863.50"></text></g><g><title>do_syscall_64 (1 samples, 0.49%)</title><rect x="3.9024%" y="837" width="0.4878%" height="15" fill="rgb(245,172,44)" fg:x="8" fg:w="1"/><text x="4.1524%" y="847.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.49%)</title><rect x="3.9024%" y="821" width="0.4878%" height="15" fill="rgb(236,23,11)" fg:x="8" fg:w="1"/><text x="4.1524%" y="831.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.49%)</title><rect x="3.9024%" y="805" width="0.4878%" height="15" fill="rgb(205,117,38)" fg:x="8" fg:w="1"/><text x="4.1524%" y="815.50"></text></g><g><title>bprm_execve (1 samples, 0.49%)</title><rect x="3.9024%" y="789" width="0.4878%" height="15" fill="rgb(237,72,25)" fg:x="8" fg:w="1"/><text x="4.1524%" y="799.50"></text></g><g><title>bprm_execve.part.0 (1 samples, 0.49%)</title><rect x="3.9024%" y="773" width="0.4878%" height="15" fill="rgb(244,70,9)" fg:x="8" fg:w="1"/><text x="4.1524%" y="783.50"></text></g><g><title>exec_binprm (1 samples, 0.49%)</title><rect x="3.9024%" y="757" width="0.4878%" height="15" fill="rgb(217,125,39)" fg:x="8" fg:w="1"/><text x="4.1524%" y="767.50"></text></g><g><title>search_binary_handler (1 samples, 0.49%)</title><rect x="3.9024%" y="741" width="0.4878%" height="15" fill="rgb(235,36,10)" fg:x="8" fg:w="1"/><text x="4.1524%" y="751.50"></text></g><g><title>load_elf_binary (1 samples, 0.49%)</title><rect x="3.9024%" y="725" width="0.4878%" height="15" fill="rgb(251,123,47)" fg:x="8" fg:w="1"/><text x="4.1524%" y="735.50"></text></g><g><title>elf_map (1 samples, 0.49%)</title><rect x="3.9024%" y="709" width="0.4878%" height="15" fill="rgb(221,13,13)" fg:x="8" fg:w="1"/><text x="4.1524%" y="719.50"></text></g><g><title>vm_mmap (1 samples, 0.49%)</title><rect x="3.9024%" y="693" width="0.4878%" height="15" fill="rgb(238,131,9)" fg:x="8" fg:w="1"/><text x="4.1524%" y="703.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.49%)</title><rect x="3.9024%" y="677" width="0.4878%" height="15" fill="rgb(211,50,8)" fg:x="8" fg:w="1"/><text x="4.1524%" y="687.50"></text></g><g><title>do_mmap (1 samples, 0.49%)</title><rect x="3.9024%" y="661" width="0.4878%" height="15" fill="rgb(245,182,24)" fg:x="8" fg:w="1"/><text x="4.1524%" y="671.50"></text></g><g><title>mmap_region (1 samples, 0.49%)</title><rect x="3.9024%" y="645" width="0.4878%" height="15" fill="rgb(242,14,37)" fg:x="8" fg:w="1"/><text x="4.1524%" y="655.50"></text></g><g><title>perf_event_mmap (1 samples, 0.49%)</title><rect x="3.9024%" y="629" width="0.4878%" height="15" fill="rgb(246,228,12)" fg:x="8" fg:w="1"/><text x="4.1524%" y="639.50"></text></g><g><title>perf_event_mmap_event (1 samples, 0.49%)</title><rect x="3.9024%" y="613" width="0.4878%" height="15" fill="rgb(213,55,15)" fg:x="8" fg:w="1"/><text x="4.1524%" y="623.50"></text></g><g><title>file_path (1 samples, 0.49%)</title><rect x="3.9024%" y="597" width="0.4878%" height="15" fill="rgb(209,9,3)" fg:x="8" fg:w="1"/><text x="4.1524%" y="607.50"></text></g><g><title>d_path (1 samples, 0.49%)</title><rect x="3.9024%" y="581" width="0.4878%" height="15" fill="rgb(230,59,30)" fg:x="8" fg:w="1"/><text x="4.1524%" y="591.50"></text></g><g><title>prepend_path (1 samples, 0.49%)</title><rect x="3.9024%" y="565" width="0.4878%" height="15" fill="rgb(209,121,21)" fg:x="8" fg:w="1"/><text x="4.1524%" y="575.50"></text></g><g><title>prepend (1 samples, 0.49%)</title><rect x="3.9024%" y="549" width="0.4878%" height="15" fill="rgb(220,109,13)" fg:x="8" fg:w="1"/><text x="4.1524%" y="559.50"></text></g><g><title>gold_lang_lsp-2 (13 samples, 6.34%)</title><rect x="0.0000%" y="869" width="6.3415%" height="15" fill="rgb(232,18,1)" fg:x="0" fg:w="13"/><text x="0.2500%" y="879.50">gold_lan..</text></g><g><title>ret_from_fork (4 samples, 1.95%)</title><rect x="4.3902%" y="853" width="1.9512%" height="15" fill="rgb(215,41,42)" fg:x="9" fg:w="4"/><text x="4.6402%" y="863.50">r..</text></g><g><title>schedule_tail (4 samples, 1.95%)</title><rect x="4.3902%" y="837" width="1.9512%" height="15" fill="rgb(224,123,36)" fg:x="9" fg:w="4"/><text x="4.6402%" y="847.50">s..</text></g><g><title>finish_task_switch.isra.0 (4 samples, 1.95%)</title><rect x="4.3902%" y="821" width="1.9512%" height="15" fill="rgb(240,125,3)" fg:x="9" fg:w="4"/><text x="4.6402%" y="831.50">f..</text></g><g><title>__perf_event_task_sched_in (4 samples, 1.95%)</title><rect x="4.3902%" y="805" width="1.9512%" height="15" fill="rgb(205,98,50)" fg:x="9" fg:w="4"/><text x="4.6402%" y="815.50">_..</text></g><g><title>ctx_sched_in (4 samples, 1.95%)</title><rect x="4.3902%" y="789" width="1.9512%" height="15" fill="rgb(205,185,37)" fg:x="9" fg:w="4"/><text x="4.6402%" y="799.50">c..</text></g><g><title>visit_groups_merge.constprop.0.isra.0 (4 samples, 1.95%)</title><rect x="4.3902%" y="773" width="1.9512%" height="15" fill="rgb(238,207,15)" fg:x="9" fg:w="4"/><text x="4.6402%" y="783.50">v..</text></g><g><title>perf_event_groups_next (1 samples, 0.49%)</title><rect x="5.8537%" y="757" width="0.4878%" height="15" fill="rgb(213,199,42)" fg:x="12" fg:w="1"/><text x="6.1037%" y="767.50"></text></g><g><title>__GI___libc_free (1 samples, 0.49%)</title><rect x="6.3415%" y="837" width="0.4878%" height="15" fill="rgb(235,201,11)" fg:x="13" fg:w="1"/><text x="6.5915%" y="847.50"></text></g><g><title>__GI___libc_malloc (9 samples, 4.39%)</title><rect x="6.8293%" y="837" width="4.3902%" height="15" fill="rgb(207,46,11)" fg:x="14" fg:w="9"/><text x="7.0793%" y="847.50">__GI_..</text></g><g><title>arena_for_chunk (1 samples, 0.49%)</title><rect x="10.7317%" y="821" width="0.4878%" height="15" fill="rgb(241,35,35)" fg:x="22" fg:w="1"/><text x="10.9817%" y="831.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.98%)</title><rect x="11.2195%" y="837" width="0.9756%" height="15" fill="rgb(243,32,47)" fg:x="23" fg:w="2"/><text x="11.4695%" y="847.50"></text></g><g><title>__memcmp_avx2_movbe (1 samples, 0.49%)</title><rect x="12.1951%" y="837" width="0.4878%" height="15" fill="rgb(247,202,23)" fg:x="25" fg:w="1"/><text x="12.4451%" y="847.50"></text></g><g><title>_int_free (4 samples, 1.95%)</title><rect x="12.6829%" y="837" width="1.9512%" height="15" fill="rgb(219,102,11)" fg:x="26" fg:w="4"/><text x="12.9329%" y="847.50">_..</text></g><g><title>_int_malloc (9 samples, 4.39%)</title><rect x="14.6341%" y="837" width="4.3902%" height="15" fill="rgb(243,110,44)" fg:x="30" fg:w="9"/><text x="14.8841%" y="847.50">_int_..</text></g><g><title>tcache_put (1 samples, 0.49%)</title><rect x="18.5366%" y="821" width="0.4878%" height="15" fill="rgb(222,74,54)" fg:x="38" fg:w="1"/><text x="18.7866%" y="831.50"></text></g><g><title>_int_realloc (1 samples, 0.49%)</title><rect x="19.0244%" y="837" width="0.4878%" height="15" fill="rgb(216,99,12)" fg:x="39" fg:w="1"/><text x="19.2744%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.49%)</title><rect x="19.5122%" y="837" width="0.4878%" height="15" fill="rgb(226,22,26)" fg:x="40" fg:w="1"/><text x="19.7622%" y="847.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.49%)</title><rect x="20.0000%" y="837" width="0.4878%" height="15" fill="rgb(217,163,10)" fg:x="41" fg:w="1"/><text x="20.2500%" y="847.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (10 samples, 4.88%)</title><rect x="20.4878%" y="837" width="4.8780%" height="15" fill="rgb(213,25,53)" fg:x="42" fg:w="10"/><text x="20.7378%" y="847.50">alloc:..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.49%)</title><rect x="24.8780%" y="821" width="0.4878%" height="15" fill="rgb(252,105,26)" fg:x="51" fg:w="1"/><text x="25.1280%" y="831.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.49%)</title><rect x="24.8780%" y="805" width="0.4878%" height="15" fill="rgb(220,39,43)" fg:x="51" fg:w="1"/><text x="25.1280%" y="815.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.49%)</title><rect x="24.8780%" y="789" width="0.4878%" height="15" fill="rgb(229,68,48)" fg:x="51" fg:w="1"/><text x="25.1280%" y="799.50"></text></g><g><title>alloc::string::String::push (2 samples, 0.98%)</title><rect x="25.3659%" y="837" width="0.9756%" height="15" fill="rgb(252,8,32)" fg:x="52" fg:w="2"/><text x="25.6159%" y="847.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.49%)</title><rect x="27.3171%" y="805" width="0.4878%" height="15" fill="rgb(223,20,43)" fg:x="56" fg:w="1"/><text x="27.5671%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.49%)</title><rect x="27.3171%" y="789" width="0.4878%" height="15" fill="rgb(229,81,49)" fg:x="56" fg:w="1"/><text x="27.5671%" y="799.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (1 samples, 0.49%)</title><rect x="27.8049%" y="805" width="0.4878%" height="15" fill="rgb(236,28,36)" fg:x="57" fg:w="1"/><text x="28.0549%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (1 samples, 0.49%)</title><rect x="27.8049%" y="789" width="0.4878%" height="15" fill="rgb(249,185,26)" fg:x="57" fg:w="1"/><text x="28.0549%" y="799.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (1 samples, 0.49%)</title><rect x="27.8049%" y="773" width="0.4878%" height="15" fill="rgb(249,174,33)" fg:x="57" fg:w="1"/><text x="28.0549%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.49%)</title><rect x="27.8049%" y="757" width="0.4878%" height="15" fill="rgb(233,201,37)" fg:x="57" fg:w="1"/><text x="28.0549%" y="767.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.49%)</title><rect x="27.8049%" y="741" width="0.4878%" height="15" fill="rgb(221,78,26)" fg:x="57" fg:w="1"/><text x="28.0549%" y="751.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.49%)</title><rect x="27.8049%" y="725" width="0.4878%" height="15" fill="rgb(250,127,30)" fg:x="57" fg:w="1"/><text x="28.0549%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.49%)</title><rect x="28.2927%" y="789" width="0.4878%" height="15" fill="rgb(230,49,44)" fg:x="58" fg:w="1"/><text x="28.5427%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.49%)</title><rect x="28.2927%" y="773" width="0.4878%" height="15" fill="rgb(229,67,23)" fg:x="58" fg:w="1"/><text x="28.5427%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.49%)</title><rect x="28.2927%" y="757" width="0.4878%" height="15" fill="rgb(249,83,47)" fg:x="58" fg:w="1"/><text x="28.5427%" y="767.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.49%)</title><rect x="28.2927%" y="741" width="0.4878%" height="15" fill="rgb(215,43,3)" fg:x="58" fg:w="1"/><text x="28.5427%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.49%)</title><rect x="28.2927%" y="725" width="0.4878%" height="15" fill="rgb(238,154,13)" fg:x="58" fg:w="1"/><text x="28.5427%" y="735.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.49%)</title><rect x="28.2927%" y="709" width="0.4878%" height="15" fill="rgb(219,56,2)" fg:x="58" fg:w="1"/><text x="28.5427%" y="719.50"></text></g><g><title>gold_lang_lsp::lexer::GoldLexer::read_word (4 samples, 1.95%)</title><rect x="27.3171%" y="821" width="1.9512%" height="15" fill="rgb(233,0,4)" fg:x="56" fg:w="4"/><text x="27.5671%" y="831.50">g..</text></g><g><title>gold_lang_lsp::lexer::GoldLexer::create_word_token (2 samples, 0.98%)</title><rect x="28.2927%" y="805" width="0.9756%" height="15" fill="rgb(235,30,7)" fg:x="58" fg:w="2"/><text x="28.5427%" y="815.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.49%)</title><rect x="28.7805%" y="789" width="0.4878%" height="15" fill="rgb(250,79,13)" fg:x="59" fg:w="1"/><text x="29.0305%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.49%)</title><rect x="28.7805%" y="773" width="0.4878%" height="15" fill="rgb(211,146,34)" fg:x="59" fg:w="1"/><text x="29.0305%" y="783.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.49%)</title><rect x="28.7805%" y="757" width="0.4878%" height="15" fill="rgb(228,22,38)" fg:x="59" fg:w="1"/><text x="29.0305%" y="767.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.49%)</title><rect x="28.7805%" y="741" width="0.4878%" height="15" fill="rgb(235,168,5)" fg:x="59" fg:w="1"/><text x="29.0305%" y="751.50"></text></g><g><title>gold_lang_lsp::lexer::GoldLexer::lex (7 samples, 3.41%)</title><rect x="26.3415%" y="837" width="3.4146%" height="15" fill="rgb(221,155,16)" fg:x="54" fg:w="7"/><text x="26.5915%" y="847.50">gol..</text></g><g><title>gold_lang_lsp::lexer::GoldLexer::skip_whitespace (1 samples, 0.49%)</title><rect x="29.2683%" y="821" width="0.4878%" height="15" fill="rgb(215,215,53)" fg:x="60" fg:w="1"/><text x="29.5183%" y="831.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (1 samples, 0.49%)</title><rect x="29.2683%" y="805" width="0.4878%" height="15" fill="rgb(223,4,10)" fg:x="60" fg:w="1"/><text x="29.5183%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (1 samples, 0.49%)</title><rect x="29.2683%" y="789" width="0.4878%" height="15" fill="rgb(234,103,6)" fg:x="60" fg:w="1"/><text x="29.5183%" y="799.50"></text></g><g><title>gold_lang_lsp::lexer::GoldLexer::read_double_char_op (1 samples, 0.49%)</title><rect x="29.7561%" y="837" width="0.4878%" height="15" fill="rgb(227,97,0)" fg:x="61" fg:w="1"/><text x="30.0061%" y="847.50"></text></g><g><title>&lt;char as alloc::string::ToString&gt;::to_string (1 samples, 0.49%)</title><rect x="31.2195%" y="821" width="0.4878%" height="15" fill="rgb(234,150,53)" fg:x="64" fg:w="1"/><text x="31.4695%" y="831.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;mut str&gt;&gt;::from (1 samples, 0.49%)</title><rect x="31.2195%" y="805" width="0.4878%" height="15" fill="rgb(228,201,54)" fg:x="64" fg:w="1"/><text x="31.4695%" y="815.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.49%)</title><rect x="31.2195%" y="789" width="0.4878%" height="15" fill="rgb(222,22,37)" fg:x="64" fg:w="1"/><text x="31.4695%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.49%)</title><rect x="31.2195%" y="773" width="0.4878%" height="15" fill="rgb(237,53,32)" fg:x="64" fg:w="1"/><text x="31.4695%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.49%)</title><rect x="31.2195%" y="757" width="0.4878%" height="15" fill="rgb(233,25,53)" fg:x="64" fg:w="1"/><text x="31.4695%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.49%)</title><rect x="31.2195%" y="741" width="0.4878%" height="15" fill="rgb(210,40,34)" fg:x="64" fg:w="1"/><text x="31.4695%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.49%)</title><rect x="31.2195%" y="725" width="0.4878%" height="15" fill="rgb(241,220,44)" fg:x="64" fg:w="1"/><text x="31.4695%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.49%)</title><rect x="31.2195%" y="709" width="0.4878%" height="15" fill="rgb(235,28,35)" fg:x="64" fg:w="1"/><text x="31.4695%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.49%)</title><rect x="31.2195%" y="693" width="0.4878%" height="15" fill="rgb(210,56,17)" fg:x="64" fg:w="1"/><text x="31.4695%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.49%)</title><rect x="31.2195%" y="677" width="0.4878%" height="15" fill="rgb(224,130,29)" fg:x="64" fg:w="1"/><text x="31.4695%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.49%)</title><rect x="31.2195%" y="661" width="0.4878%" height="15" fill="rgb(235,212,8)" fg:x="64" fg:w="1"/><text x="31.4695%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.49%)</title><rect x="31.2195%" y="645" width="0.4878%" height="15" fill="rgb(223,33,50)" fg:x="64" fg:w="1"/><text x="31.4695%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.49%)</title><rect x="31.2195%" y="629" width="0.4878%" height="15" fill="rgb(219,149,13)" fg:x="64" fg:w="1"/><text x="31.4695%" y="639.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.49%)</title><rect x="31.2195%" y="613" width="0.4878%" height="15" fill="rgb(250,156,29)" fg:x="64" fg:w="1"/><text x="31.4695%" y="623.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.49%)</title><rect x="31.2195%" y="597" width="0.4878%" height="15" fill="rgb(216,193,19)" fg:x="64" fg:w="1"/><text x="31.4695%" y="607.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1 samples, 0.49%)</title><rect x="31.7073%" y="821" width="0.4878%" height="15" fill="rgb(216,135,14)" fg:x="65" fg:w="1"/><text x="31.9573%" y="831.50"></text></g><g><title>gold_lang_lsp::lexer::GoldLexer::create_token (1 samples, 0.49%)</title><rect x="32.1951%" y="821" width="0.4878%" height="15" fill="rgb(241,47,5)" fg:x="66" fg:w="1"/><text x="32.4451%" y="831.50"></text></g><g><title>gold_lang_lsp::lexer::GoldLexer::create_range (1 samples, 0.49%)</title><rect x="32.1951%" y="805" width="0.4878%" height="15" fill="rgb(233,42,35)" fg:x="66" fg:w="1"/><text x="32.4451%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.49%)</title><rect x="33.1707%" y="789" width="0.4878%" height="15" fill="rgb(231,13,6)" fg:x="68" fg:w="1"/><text x="33.4207%" y="799.50"></text></g><g><title>alloc::string::String::push (2 samples, 0.98%)</title><rect x="33.1707%" y="805" width="0.9756%" height="15" fill="rgb(207,181,40)" fg:x="68" fg:w="2"/><text x="33.4207%" y="815.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::len_utf8 (1 samples, 0.49%)</title><rect x="33.6585%" y="789" width="0.4878%" height="15" fill="rgb(254,173,49)" fg:x="69" fg:w="1"/><text x="33.9085%" y="799.50"></text></g><g><title>core::char::methods::len_utf8 (1 samples, 0.49%)</title><rect x="33.6585%" y="773" width="0.4878%" height="15" fill="rgb(221,1,38)" fg:x="69" fg:w="1"/><text x="33.9085%" y="783.50"></text></g><g><title>gold_lang_lsp::lexer::GoldLexer::read_comment (4 samples, 1.95%)</title><rect x="32.6829%" y="821" width="1.9512%" height="15" fill="rgb(206,124,46)" fg:x="67" fg:w="4"/><text x="32.9329%" y="831.50">g..</text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (1 samples, 0.49%)</title><rect x="34.1463%" y="805" width="0.4878%" height="15" fill="rgb(249,21,11)" fg:x="70" fg:w="1"/><text x="34.3963%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (1 samples, 0.49%)</title><rect x="34.1463%" y="789" width="0.4878%" height="15" fill="rgb(222,201,40)" fg:x="70" fg:w="1"/><text x="34.3963%" y="799.50"></text></g><g><title>gold_lang_lsp::lexer::GoldLexer::read_symbol (10 samples, 4.88%)</title><rect x="30.2439%" y="837" width="4.8780%" height="15" fill="rgb(235,61,29)" fg:x="62" fg:w="10"/><text x="30.4939%" y="847.50">gold_l..</text></g><g><title>gold_lang_lsp::lexer::GoldLexer::read_symbol (1 samples, 0.49%)</title><rect x="34.6341%" y="821" width="0.4878%" height="15" fill="rgb(219,207,3)" fg:x="71" fg:w="1"/><text x="34.8841%" y="831.50"></text></g><g><title>malloc_consolidate (5 samples, 2.44%)</title><rect x="35.1220%" y="837" width="2.4390%" height="15" fill="rgb(222,56,46)" fg:x="72" fg:w="5"/><text x="35.3720%" y="847.50">ma..</text></g><g><title>[anon] (65 samples, 31.71%)</title><rect x="6.3415%" y="853" width="31.7073%" height="15" fill="rgb(239,76,54)" fg:x="13" fg:w="65"/><text x="6.5915%" y="863.50">[anon]</text></g><g><title>unlink_chunk (1 samples, 0.49%)</title><rect x="37.5610%" y="837" width="0.4878%" height="15" fill="rgb(231,124,27)" fg:x="77" fg:w="1"/><text x="37.8110%" y="847.50"></text></g><g><title>[gold_lang_lsp-280a3e7f64e60a4b] (1 samples, 0.49%)</title><rect x="38.0488%" y="853" width="0.4878%" height="15" fill="rgb(249,195,6)" fg:x="78" fg:w="1"/><text x="38.2988%" y="863.50"></text></g><g><title>_int_free (1 samples, 0.49%)</title><rect x="38.0488%" y="837" width="0.4878%" height="15" fill="rgb(237,174,47)" fg:x="78" fg:w="1"/><text x="38.2988%" y="847.50"></text></g><g><title>[libc.so.6] (1 samples, 0.49%)</title><rect x="38.5366%" y="853" width="0.4878%" height="15" fill="rgb(206,201,31)" fg:x="79" fg:w="1"/><text x="38.7866%" y="863.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.49%)</title><rect x="38.5366%" y="837" width="0.4878%" height="15" fill="rgb(231,57,52)" fg:x="79" fg:w="1"/><text x="38.7866%" y="847.50"></text></g><g><title>__GI___libc_free (1 samples, 0.49%)</title><rect x="39.0244%" y="837" width="0.4878%" height="15" fill="rgb(248,177,22)" fg:x="80" fg:w="1"/><text x="39.2744%" y="847.50"></text></g><g><title>__GI___libc_malloc (6 samples, 2.93%)</title><rect x="39.5122%" y="837" width="2.9268%" height="15" fill="rgb(215,211,37)" fg:x="81" fg:w="6"/><text x="39.7622%" y="847.50">__..</text></g><g><title>__rdl_alloc (1 samples, 0.49%)</title><rect x="42.4390%" y="837" width="0.4878%" height="15" fill="rgb(241,128,51)" fg:x="87" fg:w="1"/><text x="42.6890%" y="847.50"></text></g><g><title>_int_free (5 samples, 2.44%)</title><rect x="42.9268%" y="837" width="2.4390%" height="15" fill="rgb(227,165,31)" fg:x="88" fg:w="5"/><text x="43.1768%" y="847.50">_i..</text></g><g><title>_int_malloc (14 samples, 6.83%)</title><rect x="45.3659%" y="837" width="6.8293%" height="15" fill="rgb(228,167,24)" fg:x="93" fg:w="14"/><text x="45.6159%" y="847.50">_int_mall..</text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.49%)</title><rect x="53.6585%" y="805" width="0.4878%" height="15" fill="rgb(228,143,12)" fg:x="110" fg:w="1"/><text x="53.9085%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.49%)</title><rect x="53.6585%" y="789" width="0.4878%" height="15" fill="rgb(249,149,8)" fg:x="110" fg:w="1"/><text x="53.9085%" y="799.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.49%)</title><rect x="53.6585%" y="773" width="0.4878%" height="15" fill="rgb(243,35,44)" fg:x="110" fg:w="1"/><text x="53.9085%" y="783.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.49%)</title><rect x="53.6585%" y="757" width="0.4878%" height="15" fill="rgb(246,89,9)" fg:x="110" fg:w="1"/><text x="53.9085%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 2.44%)</title><rect x="52.1951%" y="837" width="2.4390%" height="15" fill="rgb(233,213,13)" fg:x="107" fg:w="5"/><text x="52.4451%" y="847.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 1.95%)</title><rect x="52.6829%" y="821" width="1.9512%" height="15" fill="rgb(233,141,41)" fg:x="108" fg:w="4"/><text x="52.9329%" y="831.50">a..</text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.49%)</title><rect x="54.1463%" y="805" width="0.4878%" height="15" fill="rgb(239,167,4)" fg:x="111" fg:w="1"/><text x="54.3963%" y="815.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.49%)</title><rect x="54.1463%" y="789" width="0.4878%" height="15" fill="rgb(209,217,16)" fg:x="111" fg:w="1"/><text x="54.3963%" y="799.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.49%)</title><rect x="54.6341%" y="837" width="0.4878%" height="15" fill="rgb(219,88,35)" fg:x="112" fg:w="1"/><text x="54.8841%" y="847.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (4 samples, 1.95%)</title><rect x="55.1220%" y="837" width="1.9512%" height="15" fill="rgb(220,193,23)" fg:x="113" fg:w="4"/><text x="55.3720%" y="847.50">a..</text></g><g><title>alloc::str::convert_while_ascii (2 samples, 0.98%)</title><rect x="56.0976%" y="821" width="0.9756%" height="15" fill="rgb(230,90,52)" fg:x="115" fg:w="2"/><text x="56.3476%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.98%)</title><rect x="56.0976%" y="805" width="0.9756%" height="15" fill="rgb(252,106,19)" fg:x="115" fg:w="2"/><text x="56.3476%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.98%)</title><rect x="56.0976%" y="789" width="0.9756%" height="15" fill="rgb(206,74,20)" fg:x="115" fg:w="2"/><text x="56.3476%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.98%)</title><rect x="56.0976%" y="773" width="0.9756%" height="15" fill="rgb(230,138,44)" fg:x="115" fg:w="2"/><text x="56.3476%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.98%)</title><rect x="56.0976%" y="757" width="0.9756%" height="15" fill="rgb(235,182,43)" fg:x="115" fg:w="2"/><text x="56.3476%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.49%)</title><rect x="56.5854%" y="741" width="0.4878%" height="15" fill="rgb(242,16,51)" fg:x="116" fg:w="1"/><text x="56.8354%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.49%)</title><rect x="56.5854%" y="725" width="0.4878%" height="15" fill="rgb(248,9,4)" fg:x="116" fg:w="1"/><text x="56.8354%" y="735.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.49%)</title><rect x="56.5854%" y="709" width="0.4878%" height="15" fill="rgb(210,31,22)" fg:x="116" fg:w="1"/><text x="56.8354%" y="719.50"></text></g><g><title>alloc::string::String::push (2 samples, 0.98%)</title><rect x="57.0732%" y="837" width="0.9756%" height="15" fill="rgb(239,54,39)" fg:x="117" fg:w="2"/><text x="57.3232%" y="847.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::len_utf8 (1 samples, 0.49%)</title><rect x="57.5610%" y="821" width="0.4878%" height="15" fill="rgb(230,99,41)" fg:x="118" fg:w="1"/><text x="57.8110%" y="831.50"></text></g><g><title>core::char::methods::len_utf8 (1 samples, 0.49%)</title><rect x="57.5610%" y="805" width="0.4878%" height="15" fill="rgb(253,106,12)" fg:x="118" fg:w="1"/><text x="57.8110%" y="815.50"></text></g><g><title>gold_lang_lsp::lexer::GoldLexer::create_token (1 samples, 0.49%)</title><rect x="58.0488%" y="837" width="0.4878%" height="15" fill="rgb(213,46,41)" fg:x="119" fg:w="1"/><text x="58.2988%" y="847.50"></text></g><g><title>gold_lang_lsp::lexer::GoldLexer::create_range (1 samples, 0.49%)</title><rect x="58.0488%" y="821" width="0.4878%" height="15" fill="rgb(215,133,35)" fg:x="119" fg:w="1"/><text x="58.2988%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1 samples, 0.49%)</title><rect x="58.0488%" y="805" width="0.4878%" height="15" fill="rgb(213,28,5)" fg:x="119" fg:w="1"/><text x="58.2988%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.49%)</title><rect x="60.9756%" y="805" width="0.4878%" height="15" fill="rgb(215,77,49)" fg:x="125" fg:w="1"/><text x="61.2256%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.49%)</title><rect x="60.9756%" y="789" width="0.4878%" height="15" fill="rgb(248,100,22)" fg:x="125" fg:w="1"/><text x="61.2256%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 1.46%)</title><rect x="60.4878%" y="821" width="1.4634%" height="15" fill="rgb(208,67,9)" fg:x="124" fg:w="3"/><text x="60.7378%" y="831.50"></text></g><g><title>core::ptr::write (1 samples, 0.49%)</title><rect x="61.4634%" y="805" width="0.4878%" height="15" fill="rgb(219,133,21)" fg:x="126" fg:w="1"/><text x="61.7134%" y="815.50"></text></g><g><title>gold_lang_lsp::lexer::GoldLexer::lex (2 samples, 0.98%)</title><rect x="61.9512%" y="821" width="0.9756%" height="15" fill="rgb(246,46,29)" fg:x="127" fg:w="2"/><text x="62.2012%" y="831.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.49%)</title><rect x="64.3902%" y="805" width="0.4878%" height="15" fill="rgb(246,185,52)" fg:x="132" fg:w="1"/><text x="64.6402%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.49%)</title><rect x="64.3902%" y="789" width="0.4878%" height="15" fill="rgb(252,136,11)" fg:x="132" fg:w="1"/><text x="64.6402%" y="799.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (2 samples, 0.98%)</title><rect x="64.8780%" y="805" width="0.9756%" height="15" fill="rgb(219,138,53)" fg:x="133" fg:w="2"/><text x="65.1280%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (2 samples, 0.98%)</title><rect x="64.8780%" y="789" width="0.9756%" height="15" fill="rgb(211,51,23)" fg:x="133" fg:w="2"/><text x="65.1280%" y="799.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (1 samples, 0.49%)</title><rect x="65.3659%" y="773" width="0.4878%" height="15" fill="rgb(247,221,28)" fg:x="134" fg:w="1"/><text x="65.6159%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.49%)</title><rect x="65.3659%" y="757" width="0.4878%" height="15" fill="rgb(251,222,45)" fg:x="134" fg:w="1"/><text x="65.6159%" y="767.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (6 samples, 2.93%)</title><rect x="66.8293%" y="741" width="2.9268%" height="15" fill="rgb(217,162,53)" fg:x="137" fg:w="6"/><text x="67.0793%" y="751.50">&lt;[..</text></g><g><title>gold_lang_lsp::lexer::GoldLexer::read_word (16 samples, 7.80%)</title><rect x="62.9268%" y="821" width="7.8049%" height="15" fill="rgb(229,93,14)" fg:x="129" fg:w="16"/><text x="63.1768%" y="831.50">gold_lang_l..</text></g><g><title>gold_lang_lsp::lexer::GoldLexer::create_word_token (10 samples, 4.88%)</title><rect x="65.8537%" y="805" width="4.8780%" height="15" fill="rgb(209,67,49)" fg:x="135" fg:w="10"/><text x="66.1037%" y="815.50">gold_l..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (8 samples, 3.90%)</title><rect x="66.8293%" y="789" width="3.9024%" height="15" fill="rgb(213,87,29)" fg:x="137" fg:w="8"/><text x="67.0793%" y="799.50">core..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (8 samples, 3.90%)</title><rect x="66.8293%" y="773" width="3.9024%" height="15" fill="rgb(205,151,52)" fg:x="137" fg:w="8"/><text x="67.0793%" y="783.50">core..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (8 samples, 3.90%)</title><rect x="66.8293%" y="757" width="3.9024%" height="15" fill="rgb(253,215,39)" fg:x="137" fg:w="8"/><text x="67.0793%" y="767.50">core..</text></g><g><title>gold_lang_lsp::lexer::GoldLexer::lex (2 samples, 0.98%)</title><rect x="69.7561%" y="741" width="0.9756%" height="15" fill="rgb(221,220,41)" fg:x="143" fg:w="2"/><text x="70.0061%" y="751.50"></text></g><g><title>gold_lang_lsp::lexer::GoldLexer::lex (29 samples, 14.15%)</title><rect x="58.5366%" y="837" width="14.1463%" height="15" fill="rgb(218,133,21)" fg:x="120" fg:w="29"/><text x="58.7866%" y="847.50">gold_lang_lsp::lexer:..</text></g><g><title>gold_lang_lsp::lexer::GoldLexer::skip_whitespace (4 samples, 1.95%)</title><rect x="70.7317%" y="821" width="1.9512%" height="15" fill="rgb(221,193,43)" fg:x="145" fg:w="4"/><text x="70.9817%" y="831.50">g..</text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (3 samples, 1.46%)</title><rect x="71.2195%" y="805" width="1.4634%" height="15" fill="rgb(240,128,52)" fg:x="146" fg:w="3"/><text x="71.4695%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (3 samples, 1.46%)</title><rect x="71.2195%" y="789" width="1.4634%" height="15" fill="rgb(253,114,12)" fg:x="146" fg:w="3"/><text x="71.4695%" y="799.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (1 samples, 0.49%)</title><rect x="72.1951%" y="773" width="0.4878%" height="15" fill="rgb(215,223,47)" fg:x="148" fg:w="1"/><text x="72.4451%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.49%)</title><rect x="72.1951%" y="757" width="0.4878%" height="15" fill="rgb(248,225,23)" fg:x="148" fg:w="1"/><text x="72.4451%" y="767.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.49%)</title><rect x="73.1707%" y="805" width="0.4878%" height="15" fill="rgb(250,108,0)" fg:x="150" fg:w="1"/><text x="73.4207%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.49%)</title><rect x="73.1707%" y="789" width="0.4878%" height="15" fill="rgb(228,208,7)" fg:x="150" fg:w="1"/><text x="73.4207%" y="799.50"></text></g><g><title>gold_lang_lsp::lexer::GoldLexer::read_symbol (3 samples, 1.46%)</title><rect x="72.6829%" y="837" width="1.4634%" height="15" fill="rgb(244,45,10)" fg:x="149" fg:w="3"/><text x="72.9329%" y="847.50"></text></g><g><title>gold_lang_lsp::lexer::GoldLexer::read_comment (2 samples, 0.98%)</title><rect x="73.1707%" y="821" width="0.9756%" height="15" fill="rgb(207,125,25)" fg:x="150" fg:w="2"/><text x="73.4207%" y="831.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (1 samples, 0.49%)</title><rect x="73.6585%" y="805" width="0.4878%" height="15" fill="rgb(210,195,18)" fg:x="151" fg:w="1"/><text x="73.9085%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (1 samples, 0.49%)</title><rect x="73.6585%" y="789" width="0.4878%" height="15" fill="rgb(249,80,12)" fg:x="151" fg:w="1"/><text x="73.9085%" y="799.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (1 samples, 0.49%)</title><rect x="73.6585%" y="773" width="0.4878%" height="15" fill="rgb(221,65,9)" fg:x="151" fg:w="1"/><text x="73.9085%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.49%)</title><rect x="73.6585%" y="757" width="0.4878%" height="15" fill="rgb(235,49,36)" fg:x="151" fg:w="1"/><text x="73.9085%" y="767.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.49%)</title><rect x="73.6585%" y="741" width="0.4878%" height="15" fill="rgb(225,32,20)" fg:x="151" fg:w="1"/><text x="73.9085%" y="751.50"></text></g><g><title>gold_lang_lsp::lexer::GoldLexer::read_symbol (1 samples, 0.49%)</title><rect x="73.6585%" y="725" width="0.4878%" height="15" fill="rgb(215,141,46)" fg:x="151" fg:w="1"/><text x="73.9085%" y="735.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.49%)</title><rect x="74.1463%" y="661" width="0.4878%" height="15" fill="rgb(250,160,47)" fg:x="152" fg:w="1"/><text x="74.3963%" y="671.50"></text></g><g><title>gold_lang_lsp::manager::test::test_lex_1_000 (2 samples, 0.98%)</title><rect x="74.1463%" y="837" width="0.9756%" height="15" fill="rgb(216,222,40)" fg:x="152" fg:w="2"/><text x="74.3963%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;gold_lang_lsp::lexer::tokens::Token&gt;&gt; (2 samples, 0.98%)</title><rect x="74.1463%" y="821" width="0.9756%" height="15" fill="rgb(234,217,39)" fg:x="152" fg:w="2"/><text x="74.3963%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.98%)</title><rect x="74.1463%" y="805" width="0.9756%" height="15" fill="rgb(207,178,40)" fg:x="152" fg:w="2"/><text x="74.3963%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;[gold_lang_lsp::lexer::tokens::Token]&gt; (2 samples, 0.98%)</title><rect x="74.1463%" y="789" width="0.9756%" height="15" fill="rgb(221,136,13)" fg:x="152" fg:w="2"/><text x="74.3963%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;gold_lang_lsp::lexer::tokens::Token&gt; (2 samples, 0.98%)</title><rect x="74.1463%" y="773" width="0.9756%" height="15" fill="rgb(249,199,10)" fg:x="152" fg:w="2"/><text x="74.3963%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (2 samples, 0.98%)</title><rect x="74.1463%" y="757" width="0.9756%" height="15" fill="rgb(249,222,13)" fg:x="152" fg:w="2"/><text x="74.3963%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.98%)</title><rect x="74.1463%" y="741" width="0.9756%" height="15" fill="rgb(244,185,38)" fg:x="152" fg:w="2"/><text x="74.3963%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.98%)</title><rect x="74.1463%" y="725" width="0.9756%" height="15" fill="rgb(236,202,9)" fg:x="152" fg:w="2"/><text x="74.3963%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.98%)</title><rect x="74.1463%" y="709" width="0.9756%" height="15" fill="rgb(250,229,37)" fg:x="152" fg:w="2"/><text x="74.3963%" y="719.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.98%)</title><rect x="74.1463%" y="693" width="0.9756%" height="15" fill="rgb(206,174,23)" fg:x="152" fg:w="2"/><text x="74.3963%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.98%)</title><rect x="74.1463%" y="677" width="0.9756%" height="15" fill="rgb(211,33,43)" fg:x="152" fg:w="2"/><text x="74.3963%" y="687.50"></text></g><g><title>gold_lang_lsp::manager::test::test_lex_1_000 (1 samples, 0.49%)</title><rect x="74.6341%" y="661" width="0.4878%" height="15" fill="rgb(245,58,50)" fg:x="153" fg:w="1"/><text x="74.8841%" y="671.50"></text></g><g><title>gold_lang_lsp::lexer::GoldLexer::read_double_char_op (1 samples, 0.49%)</title><rect x="75.1220%" y="821" width="0.4878%" height="15" fill="rgb(244,68,36)" fg:x="154" fg:w="1"/><text x="75.3720%" y="831.50"></text></g><g><title>[unknown] (76 samples, 37.07%)</title><rect x="39.0244%" y="853" width="37.0732%" height="15" fill="rgb(232,229,15)" fg:x="80" fg:w="76"/><text x="39.2744%" y="863.50">[unknown]</text></g><g><title>malloc_consolidate (2 samples, 0.98%)</title><rect x="75.1220%" y="837" width="0.9756%" height="15" fill="rgb(254,30,23)" fg:x="154" fg:w="2"/><text x="75.3720%" y="847.50"></text></g><g><title>gold_lang_lsp::lexer::GoldLexer::read_symbol (1 samples, 0.49%)</title><rect x="75.6098%" y="821" width="0.4878%" height="15" fill="rgb(235,160,14)" fg:x="155" fg:w="1"/><text x="75.8598%" y="831.50"></text></g><g><title>gold_lang_lsp::lexer::GoldLexer::read_comment (1 samples, 0.49%)</title><rect x="75.6098%" y="805" width="0.4878%" height="15" fill="rgb(212,155,44)" fg:x="155" fg:w="1"/><text x="75.8598%" y="815.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (1 samples, 0.49%)</title><rect x="75.6098%" y="789" width="0.4878%" height="15" fill="rgb(226,2,50)" fg:x="155" fg:w="1"/><text x="75.8598%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (1 samples, 0.49%)</title><rect x="75.6098%" y="773" width="0.4878%" height="15" fill="rgb(234,177,6)" fg:x="155" fg:w="1"/><text x="75.8598%" y="783.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (1 samples, 0.49%)</title><rect x="75.6098%" y="757" width="0.4878%" height="15" fill="rgb(217,24,9)" fg:x="155" fg:w="1"/><text x="75.8598%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.49%)</title><rect x="75.6098%" y="741" width="0.4878%" height="15" fill="rgb(220,13,46)" fg:x="155" fg:w="1"/><text x="75.8598%" y="751.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.49%)</title><rect x="75.6098%" y="725" width="0.4878%" height="15" fill="rgb(239,221,27)" fg:x="155" fg:w="1"/><text x="75.8598%" y="735.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.49%)</title><rect x="75.6098%" y="709" width="0.4878%" height="15" fill="rgb(222,198,25)" fg:x="155" fg:w="1"/><text x="75.8598%" y="719.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.49%)</title><rect x="75.6098%" y="693" width="0.4878%" height="15" fill="rgb(211,99,13)" fg:x="155" fg:w="1"/><text x="75.8598%" y="703.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.49%)</title><rect x="75.6098%" y="677" width="0.4878%" height="15" fill="rgb(232,111,31)" fg:x="155" fg:w="1"/><text x="75.8598%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 1.46%)</title><rect x="76.0976%" y="421" width="1.4634%" height="15" fill="rgb(245,82,37)" fg:x="156" fg:w="3"/><text x="76.3476%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[gold_lang_lsp::lexer::tokens::Token]&gt; (3 samples, 1.46%)</title><rect x="76.0976%" y="405" width="1.4634%" height="15" fill="rgb(227,149,46)" fg:x="156" fg:w="3"/><text x="76.3476%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;gold_lang_lsp::lexer::tokens::Token&gt; (3 samples, 1.46%)</title><rect x="76.0976%" y="389" width="1.4634%" height="15" fill="rgb(218,36,50)" fg:x="156" fg:w="3"/><text x="76.3476%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (3 samples, 1.46%)</title><rect x="76.0976%" y="373" width="1.4634%" height="15" fill="rgb(226,80,48)" fg:x="156" fg:w="3"/><text x="76.3476%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3 samples, 1.46%)</title><rect x="76.0976%" y="357" width="1.4634%" height="15" fill="rgb(238,224,15)" fg:x="156" fg:w="3"/><text x="76.3476%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 1.46%)</title><rect x="76.0976%" y="341" width="1.4634%" height="15" fill="rgb(241,136,10)" fg:x="156" fg:w="3"/><text x="76.3476%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 1.46%)</title><rect x="76.0976%" y="325" width="1.4634%" height="15" fill="rgb(208,32,45)" fg:x="156" fg:w="3"/><text x="76.3476%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 1.46%)</title><rect x="76.0976%" y="309" width="1.4634%" height="15" fill="rgb(207,135,9)" fg:x="156" fg:w="3"/><text x="76.3476%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 1.46%)</title><rect x="76.0976%" y="293" width="1.4634%" height="15" fill="rgb(206,86,44)" fg:x="156" fg:w="3"/><text x="76.3476%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 1.46%)</title><rect x="76.0976%" y="277" width="1.4634%" height="15" fill="rgb(245,177,15)" fg:x="156" fg:w="3"/><text x="76.3476%" y="287.50"></text></g><g><title>__GI___libc_free (3 samples, 1.46%)</title><rect x="76.0976%" y="261" width="1.4634%" height="15" fill="rgb(206,64,50)" fg:x="156" fg:w="3"/><text x="76.3476%" y="271.50"></text></g><g><title>_int_free (3 samples, 1.46%)</title><rect x="76.0976%" y="245" width="1.4634%" height="15" fill="rgb(234,36,40)" fg:x="156" fg:w="3"/><text x="76.3476%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;gold_lang_lsp::lexer::tokens::Token&gt;&gt; (4 samples, 1.95%)</title><rect x="76.0976%" y="437" width="1.9512%" height="15" fill="rgb(213,64,8)" fg:x="156" fg:w="4"/><text x="76.3476%" y="447.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;gold_lang_lsp::lexer::tokens::Token&gt;&gt; (1 samples, 0.49%)</title><rect x="77.5610%" y="421" width="0.4878%" height="15" fill="rgb(210,75,36)" fg:x="159" fg:w="1"/><text x="77.8110%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.49%)</title><rect x="77.5610%" y="405" width="0.4878%" height="15" fill="rgb(229,88,21)" fg:x="159" fg:w="1"/><text x="77.8110%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.49%)</title><rect x="77.5610%" y="389" width="0.4878%" height="15" fill="rgb(252,204,47)" fg:x="159" fg:w="1"/><text x="77.8110%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.49%)</title><rect x="77.5610%" y="373" width="0.4878%" height="15" fill="rgb(208,77,27)" fg:x="159" fg:w="1"/><text x="77.8110%" y="383.50"></text></g><g><title>__GI___libc_free (1 samples, 0.49%)</title><rect x="77.5610%" y="357" width="0.4878%" height="15" fill="rgb(221,76,26)" fg:x="159" fg:w="1"/><text x="77.8110%" y="367.50"></text></g><g><title>_int_free (1 samples, 0.49%)</title><rect x="77.5610%" y="341" width="0.4878%" height="15" fill="rgb(225,139,18)" fg:x="159" fg:w="1"/><text x="77.8110%" y="351.50"></text></g><g><title>malloc_consolidate (1 samples, 0.49%)</title><rect x="77.5610%" y="325" width="0.4878%" height="15" fill="rgb(230,137,11)" fg:x="159" fg:w="1"/><text x="77.8110%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;gold_lang_lsp::lexer::GoldLexer&gt; (1 samples, 0.49%)</title><rect x="78.0488%" y="437" width="0.4878%" height="15" fill="rgb(212,28,1)" fg:x="160" fg:w="1"/><text x="78.2988%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (1 samples, 0.49%)</title><rect x="78.0488%" y="421" width="0.4878%" height="15" fill="rgb(248,164,17)" fg:x="160" fg:w="1"/><text x="78.2988%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (1 samples, 0.49%)</title><rect x="78.0488%" y="405" width="0.4878%" height="15" fill="rgb(222,171,42)" fg:x="160" fg:w="1"/><text x="78.2988%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.49%)</title><rect x="78.0488%" y="389" width="0.4878%" height="15" fill="rgb(243,84,45)" fg:x="160" fg:w="1"/><text x="78.2988%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.49%)</title><rect x="78.0488%" y="373" width="0.4878%" height="15" fill="rgb(252,49,23)" fg:x="160" fg:w="1"/><text x="78.2988%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.49%)</title><rect x="78.0488%" y="357" width="0.4878%" height="15" fill="rgb(215,19,7)" fg:x="160" fg:w="1"/><text x="78.2988%" y="367.50"></text></g><g><title>__GI___libc_free (1 samples, 0.49%)</title><rect x="78.0488%" y="341" width="0.4878%" height="15" fill="rgb(238,81,41)" fg:x="160" fg:w="1"/><text x="78.2988%" y="351.50"></text></g><g><title>_int_free (1 samples, 0.49%)</title><rect x="78.0488%" y="325" width="0.4878%" height="15" fill="rgb(210,199,37)" fg:x="160" fg:w="1"/><text x="78.2988%" y="335.50"></text></g><g><title>heap_trim (1 samples, 0.49%)</title><rect x="78.0488%" y="309" width="0.4878%" height="15" fill="rgb(244,192,49)" fg:x="160" fg:w="1"/><text x="78.2988%" y="319.50"></text></g><g><title>shrink_heap (1 samples, 0.49%)</title><rect x="78.0488%" y="293" width="0.4878%" height="15" fill="rgb(226,211,11)" fg:x="160" fg:w="1"/><text x="78.2988%" y="303.50"></text></g><g><title>__GI_madvise (1 samples, 0.49%)</title><rect x="78.0488%" y="277" width="0.4878%" height="15" fill="rgb(236,162,54)" fg:x="160" fg:w="1"/><text x="78.2988%" y="287.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.49%)</title><rect x="78.0488%" y="261" width="0.4878%" height="15" fill="rgb(220,229,9)" fg:x="160" fg:w="1"/><text x="78.2988%" y="271.50"></text></g><g><title>do_syscall_64 (1 samples, 0.49%)</title><rect x="78.0488%" y="245" width="0.4878%" height="15" fill="rgb(250,87,22)" fg:x="160" fg:w="1"/><text x="78.2988%" y="255.50"></text></g><g><title>__x64_sys_madvise (1 samples, 0.49%)</title><rect x="78.0488%" y="229" width="0.4878%" height="15" fill="rgb(239,43,17)" fg:x="160" fg:w="1"/><text x="78.2988%" y="239.50"></text></g><g><title>do_madvise.part.0 (1 samples, 0.49%)</title><rect x="78.0488%" y="213" width="0.4878%" height="15" fill="rgb(231,177,25)" fg:x="160" fg:w="1"/><text x="78.2988%" y="223.50"></text></g><g><title>madvise_walk_vmas (1 samples, 0.49%)</title><rect x="78.0488%" y="197" width="0.4878%" height="15" fill="rgb(219,179,1)" fg:x="160" fg:w="1"/><text x="78.2988%" y="207.50"></text></g><g><title>madvise_vma_behavior (1 samples, 0.49%)</title><rect x="78.0488%" y="181" width="0.4878%" height="15" fill="rgb(238,219,53)" fg:x="160" fg:w="1"/><text x="78.2988%" y="191.50"></text></g><g><title>zap_page_range_single (1 samples, 0.49%)</title><rect x="78.0488%" y="165" width="0.4878%" height="15" fill="rgb(232,167,36)" fg:x="160" fg:w="1"/><text x="78.2988%" y="175.50"></text></g><g><title>unmap_single_vma (1 samples, 0.49%)</title><rect x="78.0488%" y="149" width="0.4878%" height="15" fill="rgb(244,19,51)" fg:x="160" fg:w="1"/><text x="78.2988%" y="159.50"></text></g><g><title>unmap_page_range (1 samples, 0.49%)</title><rect x="78.0488%" y="133" width="0.4878%" height="15" fill="rgb(224,6,22)" fg:x="160" fg:w="1"/><text x="78.2988%" y="143.50"></text></g><g><title>zap_pmd_range.isra.0 (1 samples, 0.49%)</title><rect x="78.0488%" y="117" width="0.4878%" height="15" fill="rgb(224,145,5)" fg:x="160" fg:w="1"/><text x="78.2988%" y="127.50"></text></g><g><title>zap_pte_range (1 samples, 0.49%)</title><rect x="78.0488%" y="101" width="0.4878%" height="15" fill="rgb(234,130,49)" fg:x="160" fg:w="1"/><text x="78.2988%" y="111.50"></text></g><g><title>page_remove_rmap (1 samples, 0.49%)</title><rect x="78.0488%" y="85" width="0.4878%" height="15" fill="rgb(254,6,2)" fg:x="160" fg:w="1"/><text x="78.2988%" y="95.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.49%)</title><rect x="78.0488%" y="69" width="0.4878%" height="15" fill="rgb(208,96,46)" fg:x="160" fg:w="1"/><text x="78.2988%" y="79.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.49%)</title><rect x="78.0488%" y="53" width="0.4878%" height="15" fill="rgb(239,3,39)" fg:x="160" fg:w="1"/><text x="78.2988%" y="63.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.49%)</title><rect x="78.0488%" y="37" width="0.4878%" height="15" fill="rgb(233,210,1)" fg:x="160" fg:w="1"/><text x="78.2988%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.98%)</title><rect x="79.0244%" y="421" width="0.9756%" height="15" fill="rgb(244,137,37)" fg:x="162" fg:w="2"/><text x="79.2744%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.49%)</title><rect x="79.5122%" y="405" width="0.4878%" height="15" fill="rgb(240,136,2)" fg:x="163" fg:w="1"/><text x="79.7622%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.49%)</title><rect x="79.5122%" y="389" width="0.4878%" height="15" fill="rgb(239,18,37)" fg:x="163" fg:w="1"/><text x="79.7622%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.49%)</title><rect x="79.5122%" y="373" width="0.4878%" height="15" fill="rgb(218,185,22)" fg:x="163" fg:w="1"/><text x="79.7622%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.49%)</title><rect x="79.5122%" y="357" width="0.4878%" height="15" fill="rgb(225,218,4)" fg:x="163" fg:w="1"/><text x="79.7622%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.49%)</title><rect x="79.5122%" y="341" width="0.4878%" height="15" fill="rgb(230,182,32)" fg:x="163" fg:w="1"/><text x="79.7622%" y="351.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.49%)</title><rect x="79.5122%" y="325" width="0.4878%" height="15" fill="rgb(242,56,43)" fg:x="163" fg:w="1"/><text x="79.7622%" y="335.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.49%)</title><rect x="79.5122%" y="309" width="0.4878%" height="15" fill="rgb(233,99,24)" fg:x="163" fg:w="1"/><text x="79.7622%" y="319.50"></text></g><g><title>_int_realloc (1 samples, 0.49%)</title><rect x="79.5122%" y="293" width="0.4878%" height="15" fill="rgb(234,209,42)" fg:x="163" fg:w="1"/><text x="79.7622%" y="303.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.49%)</title><rect x="79.5122%" y="277" width="0.4878%" height="15" fill="rgb(227,7,12)" fg:x="163" fg:w="1"/><text x="79.7622%" y="287.50"></text></g><g><title>gold_lang_lsp::lexer::GoldLexer::lex (1 samples, 0.49%)</title><rect x="80.0000%" y="421" width="0.4878%" height="15" fill="rgb(245,203,43)" fg:x="164" fg:w="1"/><text x="80.2500%" y="431.50"></text></g><g><title>gold_lang_lsp::lexer::GoldLexer::read_symbol (1 samples, 0.49%)</title><rect x="80.4878%" y="421" width="0.4878%" height="15" fill="rgb(238,205,33)" fg:x="165" fg:w="1"/><text x="80.7378%" y="431.50"></text></g><g><title>__GI___libc_free (1 samples, 0.49%)</title><rect x="84.3902%" y="373" width="0.4878%" height="15" fill="rgb(231,56,7)" fg:x="173" fg:w="1"/><text x="84.6402%" y="383.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.49%)</title><rect x="84.3902%" y="357" width="0.4878%" height="15" fill="rgb(244,186,29)" fg:x="173" fg:w="1"/><text x="84.6402%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.49%)</title><rect x="84.8780%" y="325" width="0.4878%" height="15" fill="rgb(234,111,31)" fg:x="174" fg:w="1"/><text x="85.1280%" y="335.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.49%)</title><rect x="84.8780%" y="309" width="0.4878%" height="15" fill="rgb(241,149,10)" fg:x="174" fg:w="1"/><text x="85.1280%" y="319.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.49%)</title><rect x="84.8780%" y="293" width="0.4878%" height="15" fill="rgb(249,206,44)" fg:x="174" fg:w="1"/><text x="85.1280%" y="303.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (1 samples, 0.49%)</title><rect x="84.8780%" y="277" width="0.4878%" height="15" fill="rgb(251,153,30)" fg:x="174" fg:w="1"/><text x="85.1280%" y="287.50"></text></g><g><title>alloc::string::String::push (6 samples, 2.93%)</title><rect x="82.9268%" y="405" width="2.9268%" height="15" fill="rgb(239,152,38)" fg:x="170" fg:w="6"/><text x="83.1768%" y="415.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 2.93%)</title><rect x="82.9268%" y="389" width="2.9268%" height="15" fill="rgb(249,139,47)" fg:x="170" fg:w="6"/><text x="83.1768%" y="399.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.98%)</title><rect x="84.8780%" y="373" width="0.9756%" height="15" fill="rgb(244,64,35)" fg:x="174" fg:w="2"/><text x="85.1280%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.98%)</title><rect x="84.8780%" y="357" width="0.9756%" height="15" fill="rgb(216,46,15)" fg:x="174" fg:w="2"/><text x="85.1280%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.98%)</title><rect x="84.8780%" y="341" width="0.9756%" height="15" fill="rgb(250,74,19)" fg:x="174" fg:w="2"/><text x="85.1280%" y="351.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.49%)</title><rect x="85.3659%" y="325" width="0.4878%" height="15" fill="rgb(249,42,33)" fg:x="175" fg:w="1"/><text x="85.6159%" y="335.50"></text></g><g><title>arena_for_chunk (1 samples, 0.49%)</title><rect x="85.3659%" y="309" width="0.4878%" height="15" fill="rgb(242,149,17)" fg:x="175" fg:w="1"/><text x="85.6159%" y="319.50"></text></g><g><title>arena_for_chunk (1 samples, 0.49%)</title><rect x="85.3659%" y="293" width="0.4878%" height="15" fill="rgb(244,29,21)" fg:x="175" fg:w="1"/><text x="85.6159%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (1 samples, 0.49%)</title><rect x="85.8537%" y="389" width="0.4878%" height="15" fill="rgb(220,130,37)" fg:x="176" fg:w="1"/><text x="86.1037%" y="399.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (1 samples, 0.49%)</title><rect x="85.8537%" y="373" width="0.4878%" height="15" fill="rgb(211,67,2)" fg:x="176" fg:w="1"/><text x="86.1037%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.49%)</title><rect x="85.8537%" y="357" width="0.4878%" height="15" fill="rgb(235,68,52)" fg:x="176" fg:w="1"/><text x="86.1037%" y="367.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.49%)</title><rect x="85.8537%" y="341" width="0.4878%" height="15" fill="rgb(246,142,3)" fg:x="176" fg:w="1"/><text x="86.1037%" y="351.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.49%)</title><rect x="85.8537%" y="325" width="0.4878%" height="15" fill="rgb(241,25,7)" fg:x="176" fg:w="1"/><text x="86.1037%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.49%)</title><rect x="85.8537%" y="309" width="0.4878%" height="15" fill="rgb(242,119,39)" fg:x="176" fg:w="1"/><text x="86.1037%" y="319.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.49%)</title><rect x="85.8537%" y="293" width="0.4878%" height="15" fill="rgb(241,98,45)" fg:x="176" fg:w="1"/><text x="86.1037%" y="303.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (1 samples, 0.49%)</title><rect x="85.8537%" y="277" width="0.4878%" height="15" fill="rgb(254,28,30)" fg:x="176" fg:w="1"/><text x="86.1037%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.49%)</title><rect x="85.8537%" y="261" width="0.4878%" height="15" fill="rgb(241,142,54)" fg:x="176" fg:w="1"/><text x="86.1037%" y="271.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (2 samples, 0.98%)</title><rect x="85.8537%" y="405" width="0.9756%" height="15" fill="rgb(222,85,15)" fg:x="176" fg:w="2"/><text x="86.1037%" y="415.50"></text></g><g><title>gold_lang_lsp::lexer::GoldLexer::lex (1 samples, 0.49%)</title><rect x="86.3415%" y="389" width="0.4878%" height="15" fill="rgb(210,85,47)" fg:x="177" fg:w="1"/><text x="86.5915%" y="399.50"></text></g><g><title>__GI___libc_free (1 samples, 0.49%)</title><rect x="87.8049%" y="373" width="0.4878%" height="15" fill="rgb(224,206,25)" fg:x="180" fg:w="1"/><text x="88.0549%" y="383.50"></text></g><g><title>__rust_realloc (1 samples, 0.49%)</title><rect x="88.2927%" y="373" width="0.4878%" height="15" fill="rgb(243,201,19)" fg:x="181" fg:w="1"/><text x="88.5427%" y="383.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.49%)</title><rect x="88.7805%" y="245" width="0.4878%" height="15" fill="rgb(236,59,4)" fg:x="182" fg:w="1"/><text x="89.0305%" y="255.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (4 samples, 1.95%)</title><rect x="87.8049%" y="389" width="1.9512%" height="15" fill="rgb(254,179,45)" fg:x="180" fg:w="4"/><text x="88.0549%" y="399.50">a..</text></g><g><title>alloc::str::convert_while_ascii (2 samples, 0.98%)</title><rect x="88.7805%" y="373" width="0.9756%" height="15" fill="rgb(226,14,10)" fg:x="182" fg:w="2"/><text x="89.0305%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.98%)</title><rect x="88.7805%" y="357" width="0.9756%" height="15" fill="rgb(244,27,41)" fg:x="182" fg:w="2"/><text x="89.0305%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.98%)</title><rect x="88.7805%" y="341" width="0.9756%" height="15" fill="rgb(235,35,32)" fg:x="182" fg:w="2"/><text x="89.0305%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.98%)</title><rect x="88.7805%" y="325" width="0.9756%" height="15" fill="rgb(218,68,31)" fg:x="182" fg:w="2"/><text x="89.0305%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.98%)</title><rect x="88.7805%" y="309" width="0.9756%" height="15" fill="rgb(207,120,37)" fg:x="182" fg:w="2"/><text x="89.0305%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.98%)</title><rect x="88.7805%" y="293" width="0.9756%" height="15" fill="rgb(227,98,0)" fg:x="182" fg:w="2"/><text x="89.0305%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.98%)</title><rect x="88.7805%" y="277" width="0.9756%" height="15" fill="rgb(207,7,3)" fg:x="182" fg:w="2"/><text x="89.0305%" y="287.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.98%)</title><rect x="88.7805%" y="261" width="0.9756%" height="15" fill="rgb(206,98,19)" fg:x="182" fg:w="2"/><text x="89.0305%" y="271.50"></text></g><g><title>gold_lang_lsp::lexer::GoldLexer::read_symbol (1 samples, 0.49%)</title><rect x="89.2683%" y="245" width="0.4878%" height="15" fill="rgb(217,5,26)" fg:x="183" fg:w="1"/><text x="89.5183%" y="255.50"></text></g><g><title>gold_lang_lsp::lexer::GoldLexer::read_comment (1 samples, 0.49%)</title><rect x="89.2683%" y="229" width="0.4878%" height="15" fill="rgb(235,190,38)" fg:x="183" fg:w="1"/><text x="89.5183%" y="239.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.49%)</title><rect x="89.2683%" y="213" width="0.4878%" height="15" fill="rgb(247,86,24)" fg:x="183" fg:w="1"/><text x="89.5183%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.49%)</title><rect x="89.2683%" y="197" width="0.4878%" height="15" fill="rgb(205,101,16)" fg:x="183" fg:w="1"/><text x="89.5183%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.49%)</title><rect x="89.2683%" y="181" width="0.4878%" height="15" fill="rgb(246,168,33)" fg:x="183" fg:w="1"/><text x="89.5183%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.49%)</title><rect x="89.2683%" y="165" width="0.4878%" height="15" fill="rgb(231,114,1)" fg:x="183" fg:w="1"/><text x="89.5183%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.49%)</title><rect x="89.7561%" y="389" width="0.4878%" height="15" fill="rgb(207,184,53)" fg:x="184" fg:w="1"/><text x="90.0061%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.49%)</title><rect x="89.7561%" y="373" width="0.4878%" height="15" fill="rgb(224,95,51)" fg:x="184" fg:w="1"/><text x="90.0061%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.49%)</title><rect x="89.7561%" y="357" width="0.4878%" height="15" fill="rgb(212,188,45)" fg:x="184" fg:w="1"/><text x="90.0061%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.49%)</title><rect x="89.7561%" y="341" width="0.4878%" height="15" fill="rgb(223,154,38)" fg:x="184" fg:w="1"/><text x="90.0061%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.49%)</title><rect x="89.7561%" y="325" width="0.4878%" height="15" fill="rgb(251,22,52)" fg:x="184" fg:w="1"/><text x="90.0061%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.49%)</title><rect x="89.7561%" y="309" width="0.4878%" height="15" fill="rgb(229,209,22)" fg:x="184" fg:w="1"/><text x="90.0061%" y="319.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.49%)</title><rect x="89.7561%" y="293" width="0.4878%" height="15" fill="rgb(234,138,34)" fg:x="184" fg:w="1"/><text x="90.0061%" y="303.50"></text></g><g><title>arena_for_chunk (1 samples, 0.49%)</title><rect x="89.7561%" y="277" width="0.4878%" height="15" fill="rgb(212,95,11)" fg:x="184" fg:w="1"/><text x="90.0061%" y="287.50"></text></g><g><title>arena_for_chunk (1 samples, 0.49%)</title><rect x="89.7561%" y="261" width="0.4878%" height="15" fill="rgb(240,179,47)" fg:x="184" fg:w="1"/><text x="90.0061%" y="271.50"></text></g><g><title>heap_for_ptr (1 samples, 0.49%)</title><rect x="89.7561%" y="245" width="0.4878%" height="15" fill="rgb(240,163,11)" fg:x="184" fg:w="1"/><text x="90.0061%" y="255.50"></text></g><g><title>gold_lang_lsp::lexer::GoldLexer::create_word_token (12 samples, 5.85%)</title><rect x="86.8293%" y="405" width="5.8537%" height="15" fill="rgb(236,37,12)" fg:x="178" fg:w="12"/><text x="87.0793%" y="415.50">gold_la..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (5 samples, 2.44%)</title><rect x="90.2439%" y="389" width="2.4390%" height="15" fill="rgb(232,164,16)" fg:x="185" fg:w="5"/><text x="90.4939%" y="399.50">co..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5 samples, 2.44%)</title><rect x="90.2439%" y="373" width="2.4390%" height="15" fill="rgb(244,205,15)" fg:x="185" fg:w="5"/><text x="90.4939%" y="383.50">co..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (5 samples, 2.44%)</title><rect x="90.2439%" y="357" width="2.4390%" height="15" fill="rgb(223,117,47)" fg:x="185" fg:w="5"/><text x="90.4939%" y="367.50">co..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (5 samples, 2.44%)</title><rect x="90.2439%" y="341" width="2.4390%" height="15" fill="rgb(244,107,35)" fg:x="185" fg:w="5"/><text x="90.4939%" y="351.50">&lt;[..</text></g><g><title>std::panic::catch_unwind (36 samples, 17.56%)</title><rect x="76.0976%" y="741" width="17.5610%" height="15" fill="rgb(205,140,8)" fg:x="156" fg:w="36"/><text x="76.3476%" y="751.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (36 samples, 17.56%)</title><rect x="76.0976%" y="725" width="17.5610%" height="15" fill="rgb(228,84,46)" fg:x="156" fg:w="36"/><text x="76.3476%" y="735.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (36 samples, 17.56%)</title><rect x="76.0976%" y="709" width="17.5610%" height="15" fill="rgb(254,188,9)" fg:x="156" fg:w="36"/><text x="76.3476%" y="719.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (36 samples, 17.56%)</title><rect x="76.0976%" y="693" width="17.5610%" height="15" fill="rgb(206,112,54)" fg:x="156" fg:w="36"/><text x="76.3476%" y="703.50">&lt;core::panic::unwind_safe::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (36 samples, 17.56%)</title><rect x="76.0976%" y="677" width="17.5610%" height="15" fill="rgb(216,84,49)" fg:x="156" fg:w="36"/><text x="76.3476%" y="687.50">std::thread::Builder::spawn..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (36 samples, 17.56%)</title><rect x="76.0976%" y="661" width="17.5610%" height="15" fill="rgb(214,194,35)" fg:x="156" fg:w="36"/><text x="76.3476%" y="671.50">std::sys_common::backtrace:..</text></g><g><title>test::run_test::{{closure}} (36 samples, 17.56%)</title><rect x="76.0976%" y="645" width="17.5610%" height="15" fill="rgb(249,28,3)" fg:x="156" fg:w="36"/><text x="76.3476%" y="655.50">test::run_test::{{closure}}</text></g><g><title>test::run_test::{{closure}} (36 samples, 17.56%)</title><rect x="76.0976%" y="629" width="17.5610%" height="15" fill="rgb(222,56,52)" fg:x="156" fg:w="36"/><text x="76.3476%" y="639.50">test::run_test::{{closure}}</text></g><g><title>test::run_test_in_process (36 samples, 17.56%)</title><rect x="76.0976%" y="613" width="17.5610%" height="15" fill="rgb(245,217,50)" fg:x="156" fg:w="36"/><text x="76.3476%" y="623.50">test::run_test_in_process</text></g><g><title>std::panic::catch_unwind (36 samples, 17.56%)</title><rect x="76.0976%" y="597" width="17.5610%" height="15" fill="rgb(213,201,24)" fg:x="156" fg:w="36"/><text x="76.3476%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (36 samples, 17.56%)</title><rect x="76.0976%" y="581" width="17.5610%" height="15" fill="rgb(248,116,28)" fg:x="156" fg:w="36"/><text x="76.3476%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (36 samples, 17.56%)</title><rect x="76.0976%" y="565" width="17.5610%" height="15" fill="rgb(219,72,43)" fg:x="156" fg:w="36"/><text x="76.3476%" y="575.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (36 samples, 17.56%)</title><rect x="76.0976%" y="549" width="17.5610%" height="15" fill="rgb(209,138,14)" fg:x="156" fg:w="36"/><text x="76.3476%" y="559.50">&lt;core::panic::unwind_safe::..</text></g><g><title>test::run_test_in_process::{{closure}} (36 samples, 17.56%)</title><rect x="76.0976%" y="533" width="17.5610%" height="15" fill="rgb(222,18,33)" fg:x="156" fg:w="36"/><text x="76.3476%" y="543.50">test::run_test_in_process::..</text></g><g><title>test::__rust_begin_short_backtrace (36 samples, 17.56%)</title><rect x="76.0976%" y="517" width="17.5610%" height="15" fill="rgb(213,199,7)" fg:x="156" fg:w="36"/><text x="76.3476%" y="527.50">test::__rust_begin_short_ba..</text></g><g><title>core::ops::function::FnOnce::call_once (36 samples, 17.56%)</title><rect x="76.0976%" y="501" width="17.5610%" height="15" fill="rgb(250,110,10)" fg:x="156" fg:w="36"/><text x="76.3476%" y="511.50">core::ops::function::FnOnce..</text></g><g><title>core::ops::function::FnOnce::call_once (36 samples, 17.56%)</title><rect x="76.0976%" y="485" width="17.5610%" height="15" fill="rgb(248,123,6)" fg:x="156" fg:w="36"/><text x="76.3476%" y="495.50">core::ops::function::FnOnce..</text></g><g><title>gold_lang_lsp::manager::test::test_lex_1_000::{{closure}} (36 samples, 17.56%)</title><rect x="76.0976%" y="469" width="17.5610%" height="15" fill="rgb(206,91,31)" fg:x="156" fg:w="36"/><text x="76.3476%" y="479.50">gold_lang_lsp::manager::tes..</text></g><g><title>gold_lang_lsp::manager::test::test_lex_1_000 (36 samples, 17.56%)</title><rect x="76.0976%" y="453" width="17.5610%" height="15" fill="rgb(211,154,13)" fg:x="156" fg:w="36"/><text x="76.3476%" y="463.50">gold_lang_lsp::manager::tes..</text></g><g><title>gold_lang_lsp::lexer::GoldLexer::lex (31 samples, 15.12%)</title><rect x="78.5366%" y="437" width="15.1220%" height="15" fill="rgb(225,148,7)" fg:x="161" fg:w="31"/><text x="78.7866%" y="447.50">gold_lang_lsp::lexer::G..</text></g><g><title>gold_lang_lsp::lexer::GoldLexer::read_word (26 samples, 12.68%)</title><rect x="80.9756%" y="421" width="12.6829%" height="15" fill="rgb(220,160,43)" fg:x="166" fg:w="26"/><text x="81.2256%" y="431.50">gold_lang_lsp::lexe..</text></g><g><title>gold_lang_lsp::lexer::GoldLexer::lex (2 samples, 0.98%)</title><rect x="92.6829%" y="405" width="0.9756%" height="15" fill="rgb(213,52,39)" fg:x="190" fg:w="2"/><text x="92.9329%" y="415.50"></text></g><g><title>__clone3 (37 samples, 18.05%)</title><rect x="76.0976%" y="853" width="18.0488%" height="15" fill="rgb(243,137,7)" fg:x="156" fg:w="37"/><text x="76.3476%" y="863.50">__clone3</text></g><g><title>start_thread (37 samples, 18.05%)</title><rect x="76.0976%" y="837" width="18.0488%" height="15" fill="rgb(230,79,13)" fg:x="156" fg:w="37"/><text x="76.3476%" y="847.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (37 samples, 18.05%)</title><rect x="76.0976%" y="821" width="18.0488%" height="15" fill="rgb(247,105,23)" fg:x="156" fg:w="37"/><text x="76.3476%" y="831.50">std::sys::unix::thread::Thre..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (37 samples, 18.05%)</title><rect x="76.0976%" y="805" width="18.0488%" height="15" fill="rgb(223,179,41)" fg:x="156" fg:w="37"/><text x="76.3476%" y="815.50">&lt;alloc::boxed::Box&lt;F,A&gt; as c..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (37 samples, 18.05%)</title><rect x="76.0976%" y="789" width="18.0488%" height="15" fill="rgb(218,9,34)" fg:x="156" fg:w="37"/><text x="76.3476%" y="799.50">&lt;alloc::boxed::Box&lt;F,A&gt; as c..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (37 samples, 18.05%)</title><rect x="76.0976%" y="773" width="18.0488%" height="15" fill="rgb(222,106,8)" fg:x="156" fg:w="37"/><text x="76.3476%" y="783.50">core::ops::function::FnOnce:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (37 samples, 18.05%)</title><rect x="76.0976%" y="757" width="18.0488%" height="15" fill="rgb(211,220,0)" fg:x="156" fg:w="37"/><text x="76.3476%" y="767.50">std::thread::Builder::spawn_..</text></g><g><title>std::sys::unix::thread::guard::current (1 samples, 0.49%)</title><rect x="93.6585%" y="741" width="0.4878%" height="15" fill="rgb(229,52,16)" fg:x="192" fg:w="1"/><text x="93.9085%" y="751.50"></text></g><g><title>__pthread_getattr_np (1 samples, 0.49%)</title><rect x="93.6585%" y="725" width="0.4878%" height="15" fill="rgb(212,155,18)" fg:x="192" fg:w="1"/><text x="93.9085%" y="735.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.49%)</title><rect x="93.6585%" y="709" width="0.4878%" height="15" fill="rgb(242,21,14)" fg:x="192" fg:w="1"/><text x="93.9085%" y="719.50"></text></g><g><title>tcache_init (1 samples, 0.49%)</title><rect x="93.6585%" y="693" width="0.4878%" height="15" fill="rgb(222,19,48)" fg:x="192" fg:w="1"/><text x="93.9085%" y="703.50"></text></g><g><title>tcache_init (1 samples, 0.49%)</title><rect x="93.6585%" y="677" width="0.4878%" height="15" fill="rgb(232,45,27)" fg:x="192" fg:w="1"/><text x="93.9085%" y="687.50"></text></g><g><title>arena_get2 (1 samples, 0.49%)</title><rect x="93.6585%" y="661" width="0.4878%" height="15" fill="rgb(249,103,42)" fg:x="192" fg:w="1"/><text x="93.9085%" y="671.50"></text></g><g><title>arena_get2 (1 samples, 0.49%)</title><rect x="93.6585%" y="645" width="0.4878%" height="15" fill="rgb(246,81,33)" fg:x="192" fg:w="1"/><text x="93.9085%" y="655.50"></text></g><g><title>_int_new_arena (1 samples, 0.49%)</title><rect x="93.6585%" y="629" width="0.4878%" height="15" fill="rgb(252,33,42)" fg:x="192" fg:w="1"/><text x="93.9085%" y="639.50"></text></g><g><title>new_heap (1 samples, 0.49%)</title><rect x="93.6585%" y="613" width="0.4878%" height="15" fill="rgb(209,212,41)" fg:x="192" fg:w="1"/><text x="93.9085%" y="623.50"></text></g><g><title>alloc_new_heap (1 samples, 0.49%)</title><rect x="93.6585%" y="597" width="0.4878%" height="15" fill="rgb(207,154,6)" fg:x="192" fg:w="1"/><text x="93.9085%" y="607.50"></text></g><g><title>__GI___munmap (1 samples, 0.49%)</title><rect x="93.6585%" y="581" width="0.4878%" height="15" fill="rgb(223,64,47)" fg:x="192" fg:w="1"/><text x="93.9085%" y="591.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.49%)</title><rect x="93.6585%" y="565" width="0.4878%" height="15" fill="rgb(211,161,38)" fg:x="192" fg:w="1"/><text x="93.9085%" y="575.50"></text></g><g><title>do_syscall_64 (1 samples, 0.49%)</title><rect x="93.6585%" y="549" width="0.4878%" height="15" fill="rgb(219,138,40)" fg:x="192" fg:w="1"/><text x="93.9085%" y="559.50"></text></g><g><title>__x64_sys_munmap (1 samples, 0.49%)</title><rect x="93.6585%" y="533" width="0.4878%" height="15" fill="rgb(241,228,46)" fg:x="192" fg:w="1"/><text x="93.9085%" y="543.50"></text></g><g><title>__vm_munmap (1 samples, 0.49%)</title><rect x="93.6585%" y="517" width="0.4878%" height="15" fill="rgb(223,209,38)" fg:x="192" fg:w="1"/><text x="93.9085%" y="527.50"></text></g><g><title>do_mas_munmap (1 samples, 0.49%)</title><rect x="93.6585%" y="501" width="0.4878%" height="15" fill="rgb(236,164,45)" fg:x="192" fg:w="1"/><text x="93.9085%" y="511.50"></text></g><g><title>do_mas_align_munmap (1 samples, 0.49%)</title><rect x="93.6585%" y="485" width="0.4878%" height="15" fill="rgb(231,15,5)" fg:x="192" fg:w="1"/><text x="93.9085%" y="495.50"></text></g><g><title>unmap_region (1 samples, 0.49%)</title><rect x="93.6585%" y="469" width="0.4878%" height="15" fill="rgb(252,35,15)" fg:x="192" fg:w="1"/><text x="93.9085%" y="479.50"></text></g><g><title>lru_add_drain (1 samples, 0.49%)</title><rect x="93.6585%" y="453" width="0.4878%" height="15" fill="rgb(248,181,18)" fg:x="192" fg:w="1"/><text x="93.9085%" y="463.50"></text></g><g><title>lru_add_drain_cpu (1 samples, 0.49%)</title><rect x="93.6585%" y="437" width="0.4878%" height="15" fill="rgb(233,39,42)" fg:x="192" fg:w="1"/><text x="93.9085%" y="447.50"></text></g><g><title>folio_batch_move_lru (1 samples, 0.49%)</title><rect x="93.6585%" y="421" width="0.4878%" height="15" fill="rgb(238,110,33)" fg:x="192" fg:w="1"/><text x="93.9085%" y="431.50"></text></g><g><title>free_unref_page_list (1 samples, 0.49%)</title><rect x="93.6585%" y="405" width="0.4878%" height="15" fill="rgb(233,195,10)" fg:x="192" fg:w="1"/><text x="93.9085%" y="415.50"></text></g><g><title>__memcmp_avx2_movbe (1 samples, 0.49%)</title><rect x="94.1463%" y="853" width="0.4878%" height="15" fill="rgb(254,105,3)" fg:x="193" fg:w="1"/><text x="94.3963%" y="863.50"></text></g><g><title>__rust_alloc (1 samples, 0.49%)</title><rect x="94.6341%" y="853" width="0.4878%" height="15" fill="rgb(221,225,9)" fg:x="194" fg:w="1"/><text x="94.8841%" y="863.50"></text></g><g><title>_int_malloc (1 samples, 0.49%)</title><rect x="95.1220%" y="853" width="0.4878%" height="15" fill="rgb(224,227,45)" fg:x="195" fg:w="1"/><text x="95.3720%" y="863.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.49%)</title><rect x="95.6098%" y="853" width="0.4878%" height="15" fill="rgb(229,198,43)" fg:x="196" fg:w="1"/><text x="95.8598%" y="863.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (2 samples, 0.98%)</title><rect x="96.0976%" y="853" width="0.9756%" height="15" fill="rgb(206,209,35)" fg:x="197" fg:w="2"/><text x="96.3476%" y="863.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_uppercase (1 samples, 0.49%)</title><rect x="96.5854%" y="837" width="0.4878%" height="15" fill="rgb(245,195,53)" fg:x="198" fg:w="1"/><text x="96.8354%" y="847.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_lowercase (1 samples, 0.49%)</title><rect x="96.5854%" y="821" width="0.4878%" height="15" fill="rgb(240,92,26)" fg:x="198" fg:w="1"/><text x="96.8354%" y="831.50"></text></g><g><title>manager::test:: (187 samples, 91.22%)</title><rect x="6.3415%" y="869" width="91.2195%" height="15" fill="rgb(207,40,23)" fg:x="13" fg:w="187"/><text x="6.5915%" y="879.50">manager::test::</text></g><g><title>unlink_chunk (1 samples, 0.49%)</title><rect x="97.0732%" y="853" width="0.4878%" height="15" fill="rgb(223,111,35)" fg:x="199" fg:w="1"/><text x="97.3232%" y="863.50"></text></g><g><title>ctx_sched_in (4 samples, 1.95%)</title><rect x="97.5610%" y="645" width="1.9512%" height="15" fill="rgb(229,147,28)" fg:x="200" fg:w="4"/><text x="97.8110%" y="655.50">c..</text></g><g><title>visit_groups_merge.constprop.0.isra.0 (4 samples, 1.95%)</title><rect x="97.5610%" y="629" width="1.9512%" height="15" fill="rgb(211,29,28)" fg:x="200" fg:w="4"/><text x="97.8110%" y="639.50">v..</text></g><g><title>merge_sched_in (4 samples, 1.95%)</title><rect x="97.5610%" y="613" width="1.9512%" height="15" fill="rgb(228,72,33)" fg:x="200" fg:w="4"/><text x="97.8110%" y="623.50">m..</text></g><g><title>event_sched_in (4 samples, 1.95%)</title><rect x="97.5610%" y="597" width="1.9512%" height="15" fill="rgb(205,214,31)" fg:x="200" fg:w="4"/><text x="97.8110%" y="607.50">e..</text></g><g><title>perf_ibs_add (4 samples, 1.95%)</title><rect x="97.5610%" y="581" width="1.9512%" height="15" fill="rgb(224,111,15)" fg:x="200" fg:w="4"/><text x="97.8110%" y="591.50">p..</text></g><g><title>perf_ibs_start (4 samples, 1.95%)</title><rect x="97.5610%" y="565" width="1.9512%" height="15" fill="rgb(253,21,26)" fg:x="200" fg:w="4"/><text x="97.8110%" y="575.50">p..</text></g><g><title>calc_timer_values (4 samples, 1.95%)</title><rect x="97.5610%" y="549" width="1.9512%" height="15" fill="rgb(245,139,43)" fg:x="200" fg:w="4"/><text x="97.8110%" y="559.50">c..</text></g><g><title>all (205 samples, 100%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(252,170,7)" fg:x="0" fg:w="205"/><text x="0.2500%" y="895.50"></text></g><g><title>perf-exec (5 samples, 2.44%)</title><rect x="97.5610%" y="869" width="2.4390%" height="15" fill="rgb(231,118,14)" fg:x="200" fg:w="5"/><text x="97.8110%" y="879.50">pe..</text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 2.44%)</title><rect x="97.5610%" y="853" width="2.4390%" height="15" fill="rgb(238,83,0)" fg:x="200" fg:w="5"/><text x="97.8110%" y="863.50">en..</text></g><g><title>do_syscall_64 (5 samples, 2.44%)</title><rect x="97.5610%" y="837" width="2.4390%" height="15" fill="rgb(221,39,39)" fg:x="200" fg:w="5"/><text x="97.8110%" y="847.50">do..</text></g><g><title>__x64_sys_execve (5 samples, 2.44%)</title><rect x="97.5610%" y="821" width="2.4390%" height="15" fill="rgb(222,119,46)" fg:x="200" fg:w="5"/><text x="97.8110%" y="831.50">__..</text></g><g><title>do_execveat_common.isra.0 (5 samples, 2.44%)</title><rect x="97.5610%" y="805" width="2.4390%" height="15" fill="rgb(222,165,49)" fg:x="200" fg:w="5"/><text x="97.8110%" y="815.50">do..</text></g><g><title>bprm_execve (5 samples, 2.44%)</title><rect x="97.5610%" y="789" width="2.4390%" height="15" fill="rgb(219,113,52)" fg:x="200" fg:w="5"/><text x="97.8110%" y="799.50">bp..</text></g><g><title>bprm_execve.part.0 (5 samples, 2.44%)</title><rect x="97.5610%" y="773" width="2.4390%" height="15" fill="rgb(214,7,15)" fg:x="200" fg:w="5"/><text x="97.8110%" y="783.50">bp..</text></g><g><title>exec_binprm (5 samples, 2.44%)</title><rect x="97.5610%" y="757" width="2.4390%" height="15" fill="rgb(235,32,4)" fg:x="200" fg:w="5"/><text x="97.8110%" y="767.50">ex..</text></g><g><title>search_binary_handler (5 samples, 2.44%)</title><rect x="97.5610%" y="741" width="2.4390%" height="15" fill="rgb(238,90,54)" fg:x="200" fg:w="5"/><text x="97.8110%" y="751.50">se..</text></g><g><title>load_elf_binary (5 samples, 2.44%)</title><rect x="97.5610%" y="725" width="2.4390%" height="15" fill="rgb(213,208,19)" fg:x="200" fg:w="5"/><text x="97.8110%" y="735.50">lo..</text></g><g><title>begin_new_exec (5 samples, 2.44%)</title><rect x="97.5610%" y="709" width="2.4390%" height="15" fill="rgb(233,156,4)" fg:x="200" fg:w="5"/><text x="97.8110%" y="719.50">be..</text></g><g><title>perf_event_exec (5 samples, 2.44%)</title><rect x="97.5610%" y="693" width="2.4390%" height="15" fill="rgb(207,194,5)" fg:x="200" fg:w="5"/><text x="97.8110%" y="703.50">pe..</text></g><g><title>perf_event_enable_on_exec (5 samples, 2.44%)</title><rect x="97.5610%" y="677" width="2.4390%" height="15" fill="rgb(206,111,30)" fg:x="200" fg:w="5"/><text x="97.8110%" y="687.50">pe..</text></g><g><title>ctx_resched (5 samples, 2.44%)</title><rect x="97.5610%" y="661" width="2.4390%" height="15" fill="rgb(243,70,54)" fg:x="200" fg:w="5"/><text x="97.8110%" y="671.50">ct..</text></g><g><title>perf_ctx_enable (1 samples, 0.49%)</title><rect x="99.5122%" y="645" width="0.4878%" height="15" fill="rgb(242,28,8)" fg:x="204" fg:w="1"/><text x="99.7622%" y="655.50"></text></g><g><title>x86_pmu_enable (1 samples, 0.49%)</title><rect x="99.5122%" y="629" width="0.4878%" height="15" fill="rgb(219,106,18)" fg:x="204" fg:w="1"/><text x="99.7622%" y="639.50"></text></g></svg></svg>